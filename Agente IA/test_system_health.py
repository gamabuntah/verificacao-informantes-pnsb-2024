#!/usr/bin/env python3
"""
Script de verifica√ß√£o completa da sa√∫de do sistema PNSB.
"""

import requests
import json
import time
import sys
import os

def test_endpoint(url, description, expected_status=200):
    """Testa um endpoint"""
    print(f"üîç Testando: {description}")
    try:
        response = requests.get(url, timeout=10)
        
        if response.status_code == expected_status:
            print(f"‚úÖ {description} - OK")
            return True
        else:
            print(f"‚ùå {description} - Erro HTTP {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå {description} - Erro de conex√£o: {str(e)}")
        return False

def test_api_with_json(url, description):
    """Testa endpoint que retorna JSON"""
    print(f"üîç Testando: {description}")
    try:
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            
            # Verificar se √© um dict com fallback
            if isinstance(data, dict) and data.get('fallback'):
                print(f"‚ö†Ô∏è  {description} - Funcionando com fallback")
                return False
            # Se √© uma lista ou dict v√°lido, considerar sucesso
            elif isinstance(data, (list, dict)):
                print(f"‚úÖ {description} - OK")
                return True
            else:
                print(f"‚ùå {description} - Resposta JSON inv√°lida")
                return False
        else:
            print(f"‚ùå {description} - Erro HTTP {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå {description} - Erro: {str(e)}")
        return False

def main():
    print("üè• VERIFICA√á√ÉO COMPLETA DE SA√öDE DO SISTEMA PNSB")
    print("=" * 60)
    
    base_url = "http://127.0.0.1:8080"
    
    # Testes de p√°ginas principais
    page_tests = [
        (f"{base_url}/", "P√°gina Dashboard"),
        (f"{base_url}/visitas", "P√°gina Visitas"),
        (f"{base_url}/relatorios", "P√°gina Relat√≥rios"),
        (f"{base_url}/contatos", "P√°gina Contatos"),
        (f"{base_url}/configuracoes", "P√°gina Configura√ß√µes"),
        (f"{base_url}/whatsapp", "P√°gina WhatsApp"),
        (f"{base_url}/produtividade", "P√°gina Produtividade"),
        (f"{base_url}/mapa-progresso", "P√°gina Mapa Progresso"),
        (f"{base_url}/assistente-abordagem", "P√°gina Assistente Abordagem"),
        (f"{base_url}/analise-resistencia", "P√°gina An√°lise Resist√™ncia"),
        (f"{base_url}/sistema-alertas", "P√°gina Sistema Alertas"),
    ]
    
    # Testes de APIs
    api_tests = [
        (f"{base_url}/api/visitas", "API Visitas"),
        (f"{base_url}/api/relatorios/hoje", "API Relat√≥rio Hoje"),
        (f"{base_url}/api/relatorios/semana", "API Relat√≥rio Semana"),
        (f"{base_url}/api/relatorios/mes", "API Relat√≥rio M√™s"),
        (f"{base_url}/api/contatos", "API Contatos"),
        (f"{base_url}/api/contatos_csv", "API Contatos CSV"),
    ]
    
    # Testes espec√≠ficos PNSB
    pnsb_tests = [
        (f"{base_url}/api/pnsb/status/funcionalidades-pnsb", "Status Funcionalidades PNSB"),
    ]
    
    # Assets e arquivos est√°ticos
    static_tests = [
        (f"{base_url}/sw.js", "Service Worker"),
        (f"{base_url}/static/manifest.json", "PWA Manifest"),
        (f"{base_url}/static/js/pwa.js", "PWA JavaScript"),
    ]
    
    results = []
    
    print("\nüìÑ TESTANDO P√ÅGINAS PRINCIPAIS:")
    print("-" * 40)
    for url, description in page_tests:
        result = test_endpoint(url, description)
        results.append((description, result))
        time.sleep(0.2)
    
    print("\nüîó TESTANDO APIs:")
    print("-" * 40)
    for url, description in api_tests:
        result = test_api_with_json(url, description)
        results.append((description, result))
        time.sleep(0.2)
    
    print("\n‚öôÔ∏è  TESTANDO FUNCIONALIDADES PNSB:")
    print("-" * 40)
    for url, description in pnsb_tests:
        result = test_endpoint(url, description)
        results.append((description, result))
        time.sleep(0.2)
    
    print("\nüìÅ TESTANDO ARQUIVOS EST√ÅTICOS:")
    print("-" * 40)
    for url, description in static_tests:
        result = test_endpoint(url, description)
        results.append((description, result))
        time.sleep(0.2)
    
    # Resumo final
    print("\n" + "=" * 60)
    print("üìä RESUMO DA VERIFICA√á√ÉO DE SA√öDE:")
    print("=" * 60)
    
    success_count = 0
    warning_count = 0
    
    for description, result in results:
        if result:
            status = "‚úÖ OK"
            success_count += 1
        else:
            status = "‚ùå FALHA"
            if "fallback" in description.lower():
                warning_count += 1
    
        print(f"{status:12} - {description}")
    
    total_tests = len(results)
    success_rate = (success_count / total_tests) * 100
    
    print(f"\nüìà ESTAT√çSTICAS:")
    print(f"   Total de testes: {total_tests}")
    print(f"   Sucessos: {success_count}")
    print(f"   Falhas: {total_tests - success_count}")
    print(f"   Taxa de sucesso: {success_rate:.1f}%")
    
    # Avaliar sa√∫de geral
    if success_rate >= 90:
        print(f"\nüéâ SISTEMA SAUD√ÅVEL! ({success_rate:.1f}% de sucesso)")
        return 0
    elif success_rate >= 70:
        print(f"\n‚ö†Ô∏è  SISTEMA COM PROBLEMAS MENORES ({success_rate:.1f}% de sucesso)")
        return 1
    else:
        print(f"\nüö® SISTEMA COM PROBLEMAS CR√çTICOS ({success_rate:.1f}% de sucesso)")
        return 2

if __name__ == "__main__":
    sys.exit(main())