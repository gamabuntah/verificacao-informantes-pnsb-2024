#!/usr/bin/env python3
"""
Testes abrangentes para todos os servi√ßos avan√ßados implementados no sistema PNSB.

Este arquivo testa todos os 16 servi√ßos avan√ßados implementados:
1. Rastreamento de Question√°rios
2. Dashboard de Produtividade  
3. Sistema de Backup e Conting√™ncia
4. Gest√£o de Prestadores
5. Sistema de Notifica√ß√µes e Alertas
6. An√°lise de Resist√™ncia
7. Assistente de Abordagem
8. Comunica√ß√£o Eficiente
9. Log√≠stica Maps
10. Perfil Inteligente de Informantes
11. Dashboard Avan√ßado
12. Agendamento Avan√ßado
13. Checklist Inteligente
14. Contatos Inteligente
15. Relat√≥rios Avan√ßados
16. WhatsApp API (rotas)
"""

import sys
import os
from datetime import datetime, date, timedelta, time
from pathlib import Path

# Adicionar o diret√≥rio do projeto ao path
project_dir = Path(__file__).parent / "gestao_visitas"
sys.path.insert(0, str(project_dir.parent))

def test_import_services():
    """Testa se todos os servi√ßos podem ser importados corretamente."""
    print("üîç Testando importa√ß√£o dos servi√ßos...")
    
    try:
        # Importar todos os servi√ßos
        from gestao_visitas.services.rastreamento_questionarios import RastreamentoQuestionarios
        from gestao_visitas.services.dashboard_produtividade import DashboardProdutividade
        from gestao_visitas.services.sistema_backup_contingencia import SistemaBackupContingencia
        from gestao_visitas.services.prestadores import GestaoAvancadaPrestadores
        from gestao_visitas.services.notificacoes_alertas import SistemaNotificacoes
        from gestao_visitas.services.analise_resistencia import AnaliseResistencia
        from gestao_visitas.services.assistente_abordagem import AssistenteAbordagem
        from gestao_visitas.services.comunicacao_eficiente import ComunicacaoEficiente
        from gestao_visitas.services.logistica_maps import LogisticaMaps
        from gestao_visitas.services.perfil_informante import PerfilInformante
        from gestao_visitas.services.dashboard_avancado import DashboardAvancado
        from gestao_visitas.services.agendamento_avancado import AgendamentoAvancado
        from gestao_visitas.services.checklist_inteligente import ChecklistInteligente
        from gestao_visitas.services.contatos_inteligente import ContatosInteligente
        from gestao_visitas.services.relatorios_avancados import RelatoriosAvancados
        
        print("‚úÖ Todos os servi√ßos importados com sucesso!")
        return True
        
    except ImportError as e:
        print(f"‚ùå Erro ao importar servi√ßos: {e}")
        return False

def test_service_initialization():
    """Testa se todos os servi√ßos podem ser inicializados."""
    print("\nüöÄ Testando inicializa√ß√£o dos servi√ßos...")
    
    services_to_test = [
        ("RastreamentoQuestionarios", lambda: RastreamentoQuestionarios()),
        ("DashboardProdutividade", lambda: DashboardProdutividade()),
        ("SistemaBackupContingencia", lambda: SistemaBackupContingencia()),
        ("GestaoAvancadaPrestadores", lambda: GestaoAvancadaPrestadores()),
        ("SistemaNotificacoes", lambda: SistemaNotificacoes()),
        ("AnaliseResistencia", lambda: AnaliseResistencia()),
        ("AssistenteAbordagem", lambda: AssistenteAbordagem()),
        ("ComunicacaoEficiente", lambda: ComunicacaoEficiente()),
        ("LogisticaMaps", lambda: LogisticaMaps()),
        ("PerfilInformante", lambda: PerfilInformante()),
        ("DashboardAvancado", lambda: DashboardAvancado()),
        ("AgendamentoAvancado", lambda: AgendamentoAvancado()),
        ("ChecklistInteligente", lambda: ChecklistInteligente()),
        ("ContatosInteligente", lambda: ContatosInteligente()),
        ("RelatoriosAvancados", lambda: RelatoriosAvancados())
    ]
    
    success_count = 0
    
    for service_name, service_constructor in services_to_test:
        try:
            service = service_constructor()
            print(f"‚úÖ {service_name} inicializado com sucesso")
            success_count += 1
        except Exception as e:
            print(f"‚ùå Erro ao inicializar {service_name}: {e}")
    
    print(f"\nüìä Resultado: {success_count}/{len(services_to_test)} servi√ßos inicializados com sucesso")
    return success_count == len(services_to_test)

def test_rastreamento_questionarios():
    """Testa funcionalidades do RastreamentoQuestionarios."""
    print("\nüìã Testando RastreamentoQuestionarios...")
    
    try:
        from gestao_visitas.services.rastreamento_questionarios import RastreamentoQuestionarios
        
        service = RastreamentoQuestionarios()
        
        # Teste 1: Dashboard completo
        dashboard = service.obter_dashboard_completo()
        assert 'estatisticas_gerais' in dashboard
        assert 'questionarios_por_status' in dashboard
        print("‚úÖ Dashboard completo funcionando")
        
        # Teste 2: Otimiza√ß√£o de cronograma
        otimizacao = service.otimizar_cronograma_completo()
        assert 'otimizacao_aplicada' in otimizacao
        assert 'melhorias_identificadas' in otimizacao
        print("‚úÖ Otimiza√ß√£o de cronograma funcionando")
        
        # Teste 3: An√°lise de status por munic√≠pio
        analise = service.analisar_status_por_municipio("Itaja√≠")
        assert 'municipio' in analise
        assert 'status_questionarios' in analise
        print("‚úÖ An√°lise por munic√≠pio funcionando")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no RastreamentoQuestionarios: {e}")
        return False

def test_dashboard_produtividade():
    """Testa funcionalidades do DashboardProdutividade."""
    print("\nüìà Testando DashboardProdutividade...")
    
    try:
        from gestao_visitas.services.dashboard_produtividade import DashboardProdutividade
        
        service = DashboardProdutividade()
        
        # Teste 1: Dashboard do pesquisador
        dashboard = service.obter_dashboard_pesquisador("pesquisador_teste")
        assert 'pesquisador_id' in dashboard
        assert 'metricas_performance' in dashboard
        print("‚úÖ Dashboard do pesquisador funcionando")
        
        # Teste 2: Gamifica√ß√£o
        gamificacao = service.calcular_gamificacao("pesquisador_teste")
        assert 'nivel_atual' in gamificacao
        assert 'badges_conquistados' in gamificacao
        print("‚úÖ Sistema de gamifica√ß√£o funcionando")
        
        # Teste 3: Ranking
        ranking = service.gerar_ranking_pesquisadores()
        assert 'ranking_geral' in ranking
        assert 'criterios_avaliacao' in ranking
        print("‚úÖ Ranking de pesquisadores funcionando")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no DashboardProdutividade: {e}")
        return False

def test_sistema_backup_contingencia():
    """Testa funcionalidades do SistemaBackupContingencia."""
    print("\nüíæ Testando SistemaBackupContingencia...")
    
    try:
        from gestao_visitas.services.sistema_backup_contingencia import SistemaBackupContingencia
        
        service = SistemaBackupContingencia()
        
        # Teste 1: Criar backup
        resultado_backup = service.criar_backup_completo()
        assert 'sucesso' in resultado_backup
        assert 'backup_id' in resultado_backup
        print("‚úÖ Cria√ß√£o de backup funcionando")
        
        # Teste 2: Listar backups
        lista_backups = service.listar_backups_disponiveis()
        assert 'backups' in lista_backups
        assert 'total_backups' in lista_backups
        print("‚úÖ Listagem de backups funcionando")
        
        # Teste 3: Plano de conting√™ncia
        plano = service.ativar_plano_contingencia("falha_sistema")
        assert 'plano_ativado' in plano
        assert 'acoes_executadas' in plano
        print("‚úÖ Plano de conting√™ncia funcionando")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no SistemaBackupContingencia: {e}")
        return False

def test_gestao_prestadores():
    """Testa funcionalidades da GestaoAvancadaPrestadores."""
    print("\nüè¢ Testando GestaoAvancadaPrestadores...")
    
    try:
        from gestao_visitas.services.prestadores import GestaoAvancadaPrestadores
        
        service = GestaoAvancadaPrestadores()
        
        # Teste 1: Validar prestador
        validacao = service.validar_prestador_avancado("12345678000195", "Empresa Teste")
        assert 'prestador_valido' in validacao
        assert 'validacoes_realizadas' in validacao
        print("‚úÖ Valida√ß√£o de prestador funcionando")
        
        # Teste 2: Dashboard de prestadores
        dashboard = service.gerar_dashboard_prestadores("Itaja√≠")
        assert 'municipio' in dashboard
        assert 'estatisticas_prestadores' in dashboard
        print("‚úÖ Dashboard de prestadores funcionando")
        
        # Teste 3: An√°lise de qualidade
        analise = service.analisar_qualidade_prestadores("Itaja√≠")
        assert 'score_qualidade_geral' in analise
        assert 'distribuicao_qualidade' in analise
        print("‚úÖ An√°lise de qualidade funcionando")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na GestaoAvancadaPrestadores: {e}")
        return False

def test_sistema_notificacoes():
    """Testa funcionalidades do SistemaNotificacoes."""
    print("\nüîî Testando SistemaNotificacoes...")
    
    try:
        from gestao_visitas.services.notificacoes_alertas import SistemaNotificacoes
        
        service = SistemaNotificacoes()
        
        # Teste 1: Enviar notifica√ß√£o
        resultado = service.enviar_notificacao(
            "usuario_teste",
            "T√≠tulo de Teste",
            "Mensagem de teste",
            "email"
        )
        assert 'sucesso' in resultado
        print("‚úÖ Envio de notifica√ß√£o funcionando")
        
        # Teste 2: Verificar alertas
        alertas = service.verificar_alertas_sistema()
        assert 'alertas_ativos' in alertas
        assert 'alertas_criticos' in alertas
        print("‚úÖ Verifica√ß√£o de alertas funcionando")
        
        # Teste 3: Configurar prefer√™ncias
        config = service.configurar_preferencias_usuario("usuario_teste", {
            'email': True,
            'sms': False,
            'push': True
        })
        assert 'usuario_id' in config
        assert 'preferencias_atualizadas' in config
        print("‚úÖ Configura√ß√£o de prefer√™ncias funcionando")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no SistemaNotificacoes: {e}")
        return False

def test_analise_resistencia():
    """Testa funcionalidades da AnaliseResistencia."""
    print("\nüéØ Testando AnaliseResistencia...")
    
    try:
        from gestao_visitas.services.analise_resistencia import AnaliseResistencia
        
        service = AnaliseResistencia()
        
        # Teste 1: Analisar resist√™ncia do informante
        analise = service.analisar_resistencia_informante("Itaja√≠", "prefeitura")
        assert 'nivel_resistencia' in analise
        assert 'padroes_identificados' in analise
        print("‚úÖ An√°lise de resist√™ncia funcionando")
        
        # Teste 2: Sugerir estrat√©gia
        estrategia = service.sugerir_estrategia_abordagem("Itaja√≠", "prefeitura")
        assert 'estrategia_recomendada' in estrategia
        assert 'argumentos_persuasivos' in estrategia
        print("‚úÖ Sugest√£o de estrat√©gia funcionando")
        
        # Teste 3: Relat√≥rio de resist√™ncia
        relatorio = service.gerar_relatorio_resistencia()
        assert 'estatisticas_gerais' in relatorio
        assert 'municipios_maior_resistencia' in relatorio
        print("‚úÖ Relat√≥rio de resist√™ncia funcionando")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na AnaliseResistencia: {e}")
        return False

def test_dashboard_avancado():
    """Testa funcionalidades do DashboardAvancado."""
    print("\nüìä Testando DashboardAvancado...")
    
    try:
        from gestao_visitas.services.dashboard_avancado import DashboardAvancado
        
        service = DashboardAvancado()
        
        # Teste 1: Dashboard principal
        dashboard = service.obter_dashboard_principal()
        assert 'timestamp_atualizacao' in dashboard
        assert 'kpis_principais' in dashboard
        assert 'status_tempo_real' in dashboard
        print("‚úÖ Dashboard principal funcionando")
        
        # Teste 2: Cache funcionando
        dashboard2 = service.obter_dashboard_principal()
        assert 'cache_info' in dashboard2
        print("‚úÖ Sistema de cache funcionando")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no DashboardAvancado: {e}")
        return False

def test_agendamento_avancado():
    """Testa funcionalidades do AgendamentoAvancado."""
    print("\nüìÖ Testando AgendamentoAvancado...")
    
    try:
        from gestao_visitas.services.agendamento_avancado import AgendamentoAvancado
        
        service = AgendamentoAvancado()
        
        # Teste 1: Sugerir hor√°rios
        horarios = service.sugerir_horarios("Itaja√≠", date.today() + timedelta(days=1))
        assert isinstance(horarios, list)
        print("‚úÖ Sugest√£o de hor√°rios funcionando")
        
        # Teste 2: Detectar conflitos
        conflitos = service.detectar_conflitos_agendamento(
            "Itaja√≠", 
            date.today() + timedelta(days=1), 
            time(9, 0), 
            time(10, 0)
        )
        assert 'tem_conflitos' in conflitos
        print("‚úÖ Detec√ß√£o de conflitos funcionando")
        
        # Teste 3: Template de visita
        template = service.criar_template_visita("MRS", "prefeitura")
        assert 'duracao_sugerida' in template
        assert 'materiais_obrigatorios' in template
        print("‚úÖ Template de visita funcionando")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no AgendamentoAvancado: {e}")
        return False

def test_checklist_inteligente():
    """Testa funcionalidades do ChecklistInteligente."""
    print("\n‚úÖ Testando ChecklistInteligente...")
    
    try:
        from gestao_visitas.services.checklist_inteligente import ChecklistInteligente
        
        service = ChecklistInteligente()
        
        # Criar um mock de visita para teste
        class MockVisita:
            def __init__(self):
                self.tipo_pesquisa = "MRS"
                self.tipo_informante = "prefeitura"
                self.municipio = "Itaja√≠"
                self.data = date.today()
                self.status = "agendada"
                self.observacoes = ""
        
        visita_mock = MockVisita()
        
        # Teste 1: Gerar checklist personalizado
        checklist = service.gerar_checklist_personalizado(visita_mock)
        assert 'checklist_base' in checklist
        assert 'tempo_estimado' in checklist
        print("‚úÖ Checklist personalizado funcionando")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no ChecklistInteligente: {e}")
        return False

def test_contatos_inteligente():
    """Testa funcionalidades do ContatosInteligente."""
    print("\nüìû Testando ContatosInteligente...")
    
    try:
        from gestao_visitas.services.contatos_inteligente import ContatosInteligente
        
        service = ContatosInteligente()
        
        # Teste 1: Enriquecer contato
        enriquecimento = service.enriquecer_contato_automatico("Itaja√≠", "MRS")
        assert 'dados_enriquecidos' in enriquecimento
        assert 'score_confiabilidade' in enriquecimento
        print("‚úÖ Enriquecimento de contato funcionando")
        
        # Teste 2: Detectar duplicados
        duplicados = service.detectar_contatos_duplicados("Itaja√≠")
        assert isinstance(duplicados, list)
        print("‚úÖ Detec√ß√£o de duplicados funcionando")
        
        # Teste 3: Relat√≥rio de qualidade
        relatorio = service.gerar_relatorio_qualidade_contatos()
        assert 'total_contatos' in relatorio
        print("‚úÖ Relat√≥rio de qualidade funcionando")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no ContatosInteligente: {e}")
        return False

def test_relatorios_avancados():
    """Testa funcionalidades do RelatoriosAvancados."""
    print("\nüìä Testando RelatoriosAvancados...")
    
    try:
        from gestao_visitas.services.relatorios_avancados import RelatoriosAvancados
        
        service = RelatoriosAvancados()
        
        data_inicio = date.today() - timedelta(days=30)
        data_fim = date.today()
        
        # Teste 1: Relat√≥rio executivo
        executivo = service.gerar_relatorio_executivo(data_inicio, data_fim)
        assert 'tipo_relatorio' in executivo
        assert 'kpis_principais' in executivo
        print("‚úÖ Relat√≥rio executivo funcionando")
        
        # Teste 2: Relat√≥rio de qualidade
        qualidade = service.gerar_relatorio_qualidade(data_inicio, data_fim)
        assert 'score_qualidade_geral' in qualidade
        print("‚úÖ Relat√≥rio de qualidade funcionando")
        
        # Teste 3: Dashboard de m√©tricas
        dashboard = service.gerar_dashboard_metricas()
        assert 'timestamp_atualizacao' in dashboard
        assert 'metricas_hoje' in dashboard
        print("‚úÖ Dashboard de m√©tricas funcionando")
        
        # Teste 4: Exporta√ß√£o
        exportacao = service.exportar_relatorio(executivo, 'json')
        assert 'formato' in exportacao
        assert 'status' in exportacao
        print("‚úÖ Exporta√ß√£o de relat√≥rios funcionando")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no RelatoriosAvancados: {e}")
        return False

def test_whatsapp_routes():
    """Testa se as rotas do WhatsApp est√£o definidas corretamente."""
    print("\nüì± Testando rotas WhatsApp...")
    
    try:
        # Verificar se o arquivo de rotas existe
        whatsapp_routes_path = Path(__file__).parent / "gestao_visitas" / "services" / "whatsapp_api.py"
        
        if whatsapp_routes_path.exists():
            with open(whatsapp_routes_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # Verificar se cont√©m as rotas principais
            expected_routes = [
                '/api/whatsapp/webhook',
                '/api/whatsapp/send_message',
                '/api/whatsapp/send_template',
                '/api/whatsapp/send_bulk'
            ]
            
            routes_found = 0
            for route in expected_routes:
                if route in content:
                    routes_found += 1
            
            print(f"‚úÖ {routes_found}/{len(expected_routes)} rotas WhatsApp encontradas")
            return routes_found >= len(expected_routes) // 2  # Pelo menos 50% das rotas
        else:
            print("‚ùå Arquivo de rotas WhatsApp n√£o encontrado")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao testar rotas WhatsApp: {e}")
        return False

def run_comprehensive_tests():
    """Executa todos os testes de forma abrangente."""
    print("=" * 60)
    print("üß™ INICIANDO TESTES ABRANGENTES DOS SERVI√áOS AVAN√áADOS")
    print("=" * 60)
    
    tests_to_run = [
        ("Importa√ß√£o de Servi√ßos", test_import_services),
        ("Inicializa√ß√£o de Servi√ßos", test_service_initialization),
        ("RastreamentoQuestionarios", test_rastreamento_questionarios),
        ("DashboardProdutividade", test_dashboard_produtividade),
        ("SistemaBackupContingencia", test_sistema_backup_contingencia),
        ("GestaoAvancadaPrestadores", test_gestao_prestadores),
        ("SistemaNotificacoes", test_sistema_notificacoes),
        ("AnaliseResistencia", test_analise_resistencia),
        ("DashboardAvancado", test_dashboard_avancado),
        ("AgendamentoAvancado", test_agendamento_avancado),
        ("ChecklistInteligente", test_checklist_inteligente),
        ("ContatosInteligente", test_contatos_inteligente),
        ("RelatoriosAvancados", test_relatorios_avancados),
        ("Rotas WhatsApp", test_whatsapp_routes)
    ]
    
    passed_tests = 0
    total_tests = len(tests_to_run)
    
    for test_name, test_function in tests_to_run:
        try:
            if test_function():
                passed_tests += 1
                print(f"‚úÖ {test_name}: PASSOU")
            else:
                print(f"‚ùå {test_name}: FALHOU")
        except Exception as e:
            print(f"‚ùå {test_name}: ERRO - {e}")
    
    print("\n" + "=" * 60)
    print("üìã RESUMO DOS TESTES")
    print("=" * 60)
    print(f"Total de testes: {total_tests}")
    print(f"Testes que passaram: {passed_tests}")
    print(f"Testes que falharam: {total_tests - passed_tests}")
    print(f"Taxa de sucesso: {(passed_tests / total_tests) * 100:.1f}%")
    
    if passed_tests == total_tests:
        print("\nüéâ TODOS OS TESTES PASSARAM! Sistema pronto para produ√ß√£o.")
    elif passed_tests >= total_tests * 0.8:
        print("\n‚úÖ Maioria dos testes passou. Sistema em boa condi√ß√£o.")
    else:
        print("\n‚ö†Ô∏è V√°rios testes falharam. Revisar implementa√ß√µes necess√°rio.")
    
    print("=" * 60)
    
    return passed_tests, total_tests

if __name__ == "__main__":
    # Executar todos os testes
    passed, total = run_comprehensive_tests()
    
    # Exit code baseado no resultado
    if passed == total:
        sys.exit(0)  # Sucesso total
    elif passed >= total * 0.8:
        sys.exit(1)  # Sucesso parcial
    else:
        sys.exit(2)  # Muitas falhas