#!/usr/bin/env python3
"""
INICIALIZA√á√ÉO DO SISTEMA EM MODO DEBUG
====================================

Este script inicia o sistema e verifica se h√° erros.
"""

import os
import sys
import subprocess
import time
import requests
from pathlib import Path

def verificar_dependencias():
    """Verifica se todas as depend√™ncias est√£o instaladas."""
    print("üîç VERIFICANDO DEPEND√äNCIAS...")
    
    dependencias = [
        'flask', 'sqlalchemy', 'flask_sqlalchemy', 'flask_migrate',
        'pandas', 'requests', 'werkzeug'
    ]
    
    faltando = []
    for dep in dependencias:
        try:
            __import__(dep)
            print(f"   ‚úÖ {dep}")
        except ImportError:
            print(f"   ‚ùå {dep}")
            faltando.append(dep)
    
    if faltando:
        print(f"\n‚ùå DEPEND√äNCIAS FALTANDO: {', '.join(faltando)}")
        return False
    
    print("‚úÖ TODAS AS DEPEND√äNCIAS OK")
    return True

def testar_importacao_app():
    """Testa se o app pode ser importado."""
    print("\nüîç TESTANDO IMPORTA√á√ÉO DO APP...")
    
    try:
        from app import app
        print("‚úÖ App importado com sucesso")
        
        with app.app_context():
            from gestao_visitas.models.agendamento import Visita
            visitas = Visita.query.all()
            print(f"‚úÖ {len(visitas)} visitas encontradas no banco")
            
            for visita in visitas:
                print(f"   - {visita.municipio} ({visita.data}) - {visita.status}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao importar app: {e}")
        import traceback
        traceback.print_exc()
        return False

def iniciar_sistema():
    """Inicia o sistema Flask."""
    print("\nüöÄ INICIANDO SISTEMA FLASK...")
    print("=" * 50)
    
    try:
        # Importar e configurar o app
        from app import app
        
        print("‚úÖ App carregado")
        print("üåê Iniciando servidor em http://localhost:8080")
        print("üìù Logs do sistema:")
        print("-" * 30)
        
        # Iniciar o servidor
        app.run(host='127.0.0.1', port=8080, debug=True, use_reloader=False)
        
    except KeyboardInterrupt:
        print("\nüõë Sistema interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro ao iniciar sistema: {e}")
        import traceback
        traceback.print_exc()

def testar_sistema_externo():
    """Testa o sistema externamente."""
    print("\nüß™ TESTANDO SISTEMA EXTERNAMENTE...")
    
    # Aguardar um pouco para o sistema iniciar
    time.sleep(3)
    
    try:
        # Testar endpoint b√°sico
        response = requests.get('http://localhost:8080/', timeout=5)
        print(f"‚úÖ P√°gina principal: {response.status_code}")
        
        # Testar API de visitas
        response = requests.get('http://localhost:8080/api/visitas', timeout=5)
        print(f"‚úÖ API visitas: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Visitas retornadas: {len(data)}")
            
            for visita in data:
                print(f"   - {visita.get('municipio')} ({visita.get('data')})")
        
        return True
        
    except requests.exceptions.ConnectionError:
        print("‚ùå N√£o foi poss√≠vel conectar ao sistema")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao testar sistema: {e}")
        return False

def main():
    print("=" * 60)
    print("üîß INICIALIZA√á√ÉO DO SISTEMA EM MODO DEBUG")
    print("=" * 60)
    
    # Verificar se estamos no diret√≥rio correto
    if not Path("app.py").exists():
        print("‚ùå ERRO: Execute este script no diret√≥rio do projeto")
        print("   cd 'Verifica√ß√£o Informantes PNSB/Agente IA'")
        return
    
    # 1. Verificar depend√™ncias
    if not verificar_dependencias():
        print("\n‚ùå INSTALE AS DEPEND√äNCIAS FALTANDO PRIMEIRO")
        return
    
    # 2. Testar importa√ß√£o
    if not testar_importacao_app():
        print("\n‚ùå PROBLEMAS NA IMPORTA√á√ÉO DO APP")
        return
    
    print("\n" + "=" * 60)
    print("üéØ SISTEMA PRONTO PARA INICIAR!")
    print("=" * 60)
    print()
    print("‚ÑπÔ∏è  INSTRU√á√ïES:")
    print("   ‚Ä¢ O sistema ser√° iniciado em http://localhost:8080")
    print("   ‚Ä¢ Acesse http://localhost:8080/visitas para ver as visitas")
    print("   ‚Ä¢ Pressione Ctrl+C para parar o sistema")
    print("   ‚Ä¢ Observe os logs para identificar erros")
    print()
    
    input("Pressione ENTER para iniciar o sistema...")
    
    # 3. Iniciar sistema
    iniciar_sistema()

if __name__ == "__main__":
    main()