#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para recriar o banco de dados quando h√° corrup√ß√£o
"""

import os
import sys
import shutil
from datetime import datetime

def recriar_banco():
    """Recria o banco de dados do zero"""
    
    print("üîß RECRIANDO BANCO DE DADOS PNSB 2024")
    print("=" * 50)
    
    # Caminho do banco
    db_path = os.path.join(os.getcwd(), 'gestao_visitas', 'gestao_visitas.db')
    db_backup_path = f"{db_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    # 1. Fazer backup do banco corrompido
    try:
        if os.path.exists(db_path):
            print(f"üì¶ Fazendo backup do banco corrompido...")
            shutil.move(db_path, db_backup_path)
            print(f"   ‚úÖ Backup salvo em: {os.path.basename(db_backup_path)}")
    except Exception as e:
        print(f"   ‚ö†Ô∏è N√£o foi poss√≠vel fazer backup: {e}")
    
    # 2. Criar novo banco
    print("üèóÔ∏è Criando novo banco de dados...")
    
    try:
        from flask import Flask
        from gestao_visitas.db import db
        
        app = Flask(__name__)
        app.config['SQLALCHEMY_DATABASE_URI'] = f'sqlite:///{db_path}'
        app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
        app.config['SECRET_KEY'] = 'recreate_db_key'
        
        db.init_app(app)
        
        with app.app_context():
            # Importar todos os modelos
            from gestao_visitas.models.agendamento import Visita, Calendario
            from gestao_visitas.models.checklist import Checklist
            from gestao_visitas.models.contatos import Contato, TipoEntidade, FonteInformacao
            from gestao_visitas.models.questionarios_obrigatorios import (
                QuestionarioObrigatorio, 
                EntidadeIdentificada, 
                ProgressoQuestionarios,
                EntidadePrioritariaUF
            )
            from gestao_visitas.models.visitas_obrigatorias import (
                VisitaObrigatoria,
                StatusVisitasObrigatorias
            )
            
            # Criar todas as tabelas
            db.create_all()
            print("   ‚úÖ Tabelas criadas com sucesso")
            
            # 3. Repovoar dados essenciais
            print("üìä Repovoando dados essenciais...")
            
            # Recriar visitas obrigat√≥rias
            try:
                from gestao_visitas.models.visitas_obrigatorias import inicializar_visitas_obrigatorias
                resultado = inicializar_visitas_obrigatorias()
                print(f"   ‚úÖ {resultado['visitas_criadas']} visitas obrigat√≥rias criadas")
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erro ao inicializar visitas obrigat√≥rias: {e}")
            
            # Recriar progresso de question√°rios
            try:
                from gestao_visitas.config import MUNICIPIOS as MUNICIPIOS_PNSB
                from gestao_visitas.models.questionarios_obrigatorios import ProgressoQuestionarios
                
                for municipio in MUNICIPIOS_PNSB:
                    progresso = ProgressoQuestionarios.calcular_progresso_municipio(municipio)
                    if progresso:
                        db.session.add(progresso)
                
                db.session.commit()
                print(f"   ‚úÖ Progresso de question√°rios recriado para {len(MUNICIPIOS_PNSB)} munic√≠pios")
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erro ao recriar progresso: {e}")
            
            print("üéâ Banco de dados recriado com sucesso!")
            print(f"üìÅ Localiza√ß√£o: {db_path}")
            
            # Verificar dados
            print("\nüìä Verificando dados...")
            try:
                from gestao_visitas.models.visitas_obrigatorias import VisitaObrigatoria
                from gestao_visitas.models.questionarios_obrigatorios import ProgressoQuestionarios
                
                vo_count = VisitaObrigatoria.query.count()
                prog_count = ProgressoQuestionarios.query.count()
                
                print(f"   üìã Visitas obrigat√≥rias: {vo_count}")
                print(f"   üìà Registros de progresso: {prog_count}")
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erro na verifica√ß√£o: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao recriar banco: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üöÄ SCRIPT DE RECRIA√á√ÉO DE BANCO - PNSB 2024")
    print(f"üìÖ Executado em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    sucesso = recriar_banco()
    
    if sucesso:
        print("\n" + "=" * 50)
        print("‚úÖ BANCO RECRIADO COM SUCESSO!")
        print("üöÄ Agora voc√™ pode reiniciar o Flask")
        print("=" * 50)
        sys.exit(0)
    else:
        print("\n" + "=" * 50)
        print("‚ùå FALHA NA RECRIA√á√ÉO DO BANCO")
        print("üîß Verifique os logs acima")
        print("=" * 50)
        sys.exit(1)