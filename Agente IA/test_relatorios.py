#!/usr/bin/env python3
"""
Script de teste para verificar se a funcionalidade de relat√≥rios est√° funcionando corretamente.
"""

import requests
import json
import time
import sys

def test_api_endpoint(url, description):
    """Testa um endpoint da API"""
    print(f"üîç Testando: {description}")
    try:
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            
            # Verificar se √© um fallback (indica erro)
            if data.get('fallback'):
                print(f"‚ö†Ô∏è  API funcionando mas com fallback - Erro: {data.get('erro', 'Desconhecido')}")
                return False
            else:
                print(f"‚úÖ {description} - OK")
                return True
        else:
            print(f"‚ùå {description} - Erro HTTP {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå {description} - Erro de conex√£o: {str(e)}")
        return False

def test_relatorios_page():
    """Testa se a p√°gina de relat√≥rios carrega"""
    print(f"üîç Testando: P√°gina de relat√≥rios")
    try:
        response = requests.get("http://127.0.0.1:8080/relatorios", timeout=10)
        
        if response.status_code == 200:
            if "Relat√≥rios de Visitas" in response.text:
                print(f"‚úÖ P√°gina de relat√≥rios - OK")
                return True
            else:
                print(f"‚ö†Ô∏è  P√°gina carregou mas conte√∫do incorreto")
                return False
        else:
            print(f"‚ùå P√°gina de relat√≥rios - Erro HTTP {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå P√°gina de relat√≥rios - Erro de conex√£o: {str(e)}")
        return False

def main():
    print("üß™ TESTE DE FUNCIONALIDADE - RELAT√ìRIOS PNSB")
    print("=" * 50)
    
    base_url = "http://127.0.0.1:8080"
    
    tests = [
        (f"{base_url}/relatorios", "P√°gina de relat√≥rios", test_relatorios_page),
        (f"{base_url}/api/relatorios/hoje", "API Relat√≥rio Hoje", test_api_endpoint),
        (f"{base_url}/api/relatorios/semana", "API Relat√≥rio Semana", test_api_endpoint),
        (f"{base_url}/api/relatorios/mes", "API Relat√≥rio M√™s", test_api_endpoint),
    ]
    
    results = []
    
    for test_data in tests:
        if len(test_data) == 3:
            url, description, test_func = test_data
            if test_func == test_relatorios_page:
                result = test_func()
            else:
                result = test_func(url, description)
        else:
            url, description = test_data
            result = test_api_endpoint(url, description)
        
        results.append((description, result))
        time.sleep(0.5)  # Pequena pausa entre testes
    
    print("\n" + "=" * 50)
    print("üìä RESULTADOS DOS TESTES:")
    print("=" * 50)
    
    success_count = 0
    for description, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{status} - {description}")
        if result:
            success_count += 1
    
    print(f"\nüìà RESUMO: {success_count}/{len(results)} testes passaram")
    
    if success_count == len(results):
        print("\nüéâ TODOS OS TESTES PASSARAM! A funcionalidade de relat√≥rios est√° funcionando corretamente.")
        return 0
    else:
        print(f"\n‚ö†Ô∏è  {len(results) - success_count} teste(s) falharam. Verifique os erros acima.")
        return 1

if __name__ == "__main__":
    sys.exit(main())