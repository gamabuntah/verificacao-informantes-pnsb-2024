"""
Sistema de Comunica√ß√£o Eficiente - PNSB
Templates, multicanal e automa√ß√£o de comunica√ß√£o com informantes
"""

from datetime import datetime, timedelta, time
from typing import Dict, List, Optional, Any
from ..models.agendamento import Visita
from ..models.contatos import Contato
from ..db import db
import json
from collections import defaultdict

class ComunicacaoEficiente:
    """Sistema de comunica√ß√£o multicanal para informantes PNSB"""
    
    def __init__(self):
        # Templates de mensagem por situa√ß√£o
        self.templates_mensagem = {
            'agendamento_inicial': {
                'telefone': {
                    'script': "Bom dia/Boa tarde, {nome}. Sou {pesquisador} do IBGE. Estou ligando sobre a Pesquisa Nacional de Saneamento B√°sico em {municipio}. Podemos agendar um hor√°rio conveniente para voc√™?",
                    'duracao_estimada': 3,
                    'followup': 'confirmar_por_whatsapp'
                },
                'whatsapp': {
                    'template': "Ol√° {nome}! Sou {pesquisador} do IBGE üìä\n\nEstou entrando em contato sobre a Pesquisa Nacional de Saneamento B√°sico em {municipio}.\n\nPodemos agendar um hor√°rio conveniente? O processo leva cerca de 30-45 minutos.\n\nObrigado! üôè",
                    'horario_envio': 'comercial',
                    'aguardar_resposta': 24
                },
                'email': {
                    'assunto': 'IBGE - Pesquisa Nacional de Saneamento B√°sico - {municipio}',
                    'template': """Prezado(a) {nome},

O Instituto Brasileiro de Geografia e Estat√≠stica (IBGE) est√° conduzindo a Pesquisa Nacional de Saneamento B√°sico 2024.

Seu munic√≠pio foi selecionado para participar desta importante pesquisa sobre manejo de res√≠duos s√≥lidos e √°guas pluviais.

Gostaria de agendar um hor√°rio conveniente para a coleta dos dados. O processo √© simples e leva aproximadamente 30-45 minutos.

Atenciosamente,
{pesquisador}
Pesquisador IBGE
Telefone: {telefone_pesquisador}""",
                    'prioridade': 'normal'
                }
            },
            'confirmacao_agendamento': {
                'whatsapp': {
                    'template': "‚úÖ Agendamento confirmado!\n\nüìÖ Data: {data_visita}\n‚è∞ Hor√°rio: {horario}\nüìç Local: {local}\nüë§ Pesquisador: {pesquisador}\n\nEm caso de necessidade, entre em contato: {telefone_pesquisador}",
                    'enviar_antes': 1440  # 24h antes
                },
                'email': {
                    'assunto': 'Confirma√ß√£o - Pesquisa IBGE em {data_visita}',
                    'template': """Prezado(a) {nome},

Confirmamos o agendamento da Pesquisa Nacional de Saneamento B√°sico:

üìÖ Data: {data_visita}
‚è∞ Hor√°rio: {horario}  
üìç Local: {local}
üë§ Pesquisador: {pesquisador}
üìû Contato: {telefone_pesquisador}

Materiais necess√°rios:
- Dados sobre coleta de res√≠duos s√≥lidos
- Informa√ß√µes sobre drenagem urbana
- Dados de infraestrutura de saneamento

Atenciosamente,
{pesquisador}"""
                }
            },
            'lembrete_visita': {
                'whatsapp': {
                    'template': "üîî Lembrete: Pesquisa IBGE hoje!\n\n‚è∞ {horario} - {local}\nüë§ {pesquisador}\n\nAt√© logo! üëã",
                    'enviar_antes': 120  # 2h antes
                },
                'telefone': {
                    'script': "Bom dia/Boa tarde, {nome}. √â {pesquisador} do IBGE. S√≥ para lembrar de nosso agendamento hoje √†s {horario}. Confirma que est√° tudo certo?",
                    'enviar_antes': 60  # 1h antes
                }
            },
            'reagendamento': {
                'whatsapp': {
                    'template': "Ol√° {nome}! Preciso reagendar nossa visita de hoje. Quando seria um bom momento para voc√™? Posso ir em qualquer hor√°rio que seja conveniente. üóìÔ∏è",
                    'urgente': True
                },
                'telefone': {
                    'script': "Ol√° {nome}, √© {pesquisador} do IBGE. Infelizmente preciso reagendar nossa visita. Qual seria um bom hor√°rio alternativo para voc√™?",
                    'prioridade': 'alta'
                }
            },
            'pos_visita_agradecimento': {
                'whatsapp': {
                    'template': "Muito obrigado pela participa√ß√£o na Pesquisa IBGE! üôè\n\nSua contribui√ß√£o √© fundamental para melhorar o saneamento b√°sico no Brasil.\n\nTenha um √≥timo dia! ‚òÄÔ∏è"
                },
                'email': {
                    'assunto': 'Obrigado pela participa√ß√£o - Pesquisa IBGE',
                    'template': """Prezado(a) {nome},

Muito obrigado por sua participa√ß√£o na Pesquisa Nacional de Saneamento B√°sico.

Sua contribui√ß√£o √© fundamental para o desenvolvimento de pol√≠ticas p√∫blicas de saneamento que beneficiar√£o todo o pa√≠s.

Os resultados da pesquisa ser√£o disponibilizados no site do IBGE em at√© 6 meses.

Atenciosamente,
Equipe PNSB - IBGE"""
                }
            },
            'escalacao_supervisor': {
                'email': {
                    'assunto': 'URGENTE - Dificuldade com informante {municipio}',
                    'template': """Prezado(a) Supervisor(a),

Estou enfrentando dificuldades para coletar dados em {municipio} com o informante {nome}.

Situa√ß√£o:
- Tentativas realizadas: {tentativas}
- √öltimo contato: {ultimo_contato}
- Principal dificuldade: {dificuldade}

Solicito orienta√ß√£o sobre pr√≥ximos passos ou poss√≠vel escala√ß√£o.

Atenciosamente,
{pesquisador}"""
                }
            }
        }
        
        # Regras para sele√ß√£o de canal
        self.regras_canal = self._definir_regras_canal()
        
        # Hist√≥rico de comunica√ß√£o
        self.historico_comunicacao = {}
    
    def selecionar_canal_otimo(self, informante_nome: str, municipio: str, 
                             tipo_mensagem: str, contexto: Dict = None) -> Dict:
        """Seleciona o melhor canal de comunica√ß√£o para uma situa√ß√£o espec√≠fica"""
        
        # Obter dados do informante
        contato = Contato.query.filter_by(
            nome=informante_nome,
            municipio=municipio
        ).first()
        
        if not contato:
            return {'erro': 'Informante n√£o encontrado'}
        
        # Analisar hist√≥rico de comunica√ß√£o
        historico_sucesso = self._analisar_historico_comunicacao(informante_nome, municipio)
        
        # Aplicar regras de sele√ß√£o
        canais_disponiveis = self._identificar_canais_disponiveis(contato)
        canais_pontuados = self._pontuar_canais(
            canais_disponiveis, tipo_mensagem, historico_sucesso, contexto
        )
        
        # Selecionar melhor canal
        melhor_canal = max(canais_pontuados, key=lambda x: x['score']) if canais_pontuados else None
        
        if not melhor_canal:
            return {'erro': 'Nenhum canal dispon√≠vel'}
        
        # Gerar recomenda√ß√µes espec√≠ficas
        recomendacoes = self._gerar_recomendacoes_canal(
            melhor_canal, tipo_mensagem, historico_sucesso, contexto
        )
        
        return {
            'canal_recomendado': melhor_canal['canal'],
            'score_confianca': melhor_canal['score'],
            'justificativa': melhor_canal['justificativa'],
            'canais_alternativos': [c for c in canais_pontuados if c != melhor_canal][:2],
            'recomendacoes_uso': recomendacoes,
            'horario_ideal': self._sugerir_horario_ideal(melhor_canal['canal'], historico_sucesso),
            'followup_recomendado': self._sugerir_followup(melhor_canal['canal'], tipo_mensagem)
        }
    
    def gerar_mensagem_personalizada(self, informante_nome: str, municipio: str,
                                   tipo_mensagem: str, canal: str, 
                                   dados_personalizacao: Dict = None) -> Dict:
        """Gera mensagem personalizada para um informante espec√≠fico"""
        
        # Obter template base
        template_info = self.templates_mensagem.get(tipo_mensagem, {}).get(canal, {})
        
        if not template_info:
            return {'erro': f'Template n√£o encontrado para {tipo_mensagem} via {canal}'}
        
        # Obter dados do informante
        contato = Contato.query.filter_by(
            nome=informante_nome,
            municipio=municipio
        ).first()
        
        # Preparar dados para personaliza√ß√£o
        dados_base = {
            'nome': informante_nome,
            'municipio': municipio,
            'pesquisador': dados_personalizacao.get('pesquisador', '[Nome do Pesquisador]') if dados_personalizacao else '[Nome do Pesquisador]',
            'telefone_pesquisador': dados_personalizacao.get('telefone_pesquisador', '[Telefone]') if dados_personalizacao else '[Telefone]',
            'data_visita': dados_personalizacao.get('data_visita', '[Data]') if dados_personalizacao else '[Data]',
            'horario': dados_personalizacao.get('horario', '[Hor√°rio]') if dados_personalizacao else '[Hor√°rio]',
            'local': dados_personalizacao.get('local', f'Prefeitura de {municipio}') if dados_personalizacao else f'Prefeitura de {municipio}'
        }
        
        # Adicionar dados espec√≠ficos se fornecidos
        if dados_personalizacao:
            dados_base.update(dados_personalizacao)
        
        # Personalizar mensagem baseado no hist√≥rico do informante
        mensagem_personalizada = self._personalizar_mensagem_historico(
            template_info, dados_base, informante_nome, municipio
        )
        
        # Gerar instru√ß√µes de envio
        instrucoes_envio = self._gerar_instrucoes_envio(canal, template_info, contato)
        
        return {
            'canal': canal,
            'tipo_mensagem': tipo_mensagem,
            'mensagem_final': mensagem_personalizada,
            'instrucoes_envio': instrucoes_envio,
            'dados_contato': {
                'telefone': contato.telefone if contato else None,
                'email': contato.email if contato else None,
                'whatsapp': contato.telefone if contato else None  # Assumindo mesmo n√∫mero
            },
            'timing_recomendado': self._calcular_timing_envio(canal, template_info),
            'followup_necessario': template_info.get('followup', False),
            'prioridade': template_info.get('prioridade', 'normal')
        }
    
    def programar_lembretes_automaticos(self, visita_id: int) -> Dict:
        """Programa lembretes autom√°ticos para uma visita"""
        
        visita = Visita.query.get(visita_id)
        if not visita:
            return {'erro': 'Visita n√£o encontrada'}
        
        # Calcular hor√°rios dos lembretes
        data_visita = datetime.combine(visita.data, visita.hora_inicio)
        
        lembretes_programados = []
        
        # Lembrete 24h antes (confirma√ß√£o)
        lembrete_24h = data_visita - timedelta(hours=24)
        if lembrete_24h > datetime.now():
            lembrete_24h_config = self._configurar_lembrete(
                visita, 'confirmacao_agendamento', lembrete_24h, 'whatsapp'
            )
            lembretes_programados.append(lembrete_24h_config)
        
        # Lembrete 2h antes (√∫ltimo lembrete)
        lembrete_2h = data_visita - timedelta(hours=2)
        if lembrete_2h > datetime.now():
            lembrete_2h_config = self._configurar_lembrete(
                visita, 'lembrete_visita', lembrete_2h, 'whatsapp'
            )
            lembretes_programados.append(lembrete_2h_config)
        
        # Registrar lembretes no sistema
        for lembrete in lembretes_programados:
            self._registrar_lembrete_sistema(lembrete)
        
        return {
            'visita_id': visita_id,
            'total_lembretes_programados': len(lembretes_programados),
            'lembretes': lembretes_programados,
            'status': 'programado'
        }
    
    def registrar_comunicacao(self, informante_nome: str, municipio: str,
                            comunicacao_data: Dict) -> Dict:
        """Registra uma comunica√ß√£o realizada"""
        
        registro = {
            'timestamp': datetime.now().isoformat(),
            'informante': informante_nome,
            'municipio': municipio,
            'canal_utilizado': comunicacao_data.get('canal'),
            'tipo_mensagem': comunicacao_data.get('tipo_mensagem'),
            'sucesso': comunicacao_data.get('sucesso', False),
            'resposta_recebida': comunicacao_data.get('resposta_recebida', False),
            'tempo_resposta_minutos': comunicacao_data.get('tempo_resposta_minutos'),
            'observacoes': comunicacao_data.get('observacoes', ''),
            'proximo_followup': comunicacao_data.get('proximo_followup'),
            'pesquisador_responsavel': comunicacao_data.get('pesquisador', 'sistema')
        }
        
        # Atualizar hist√≥rico do contato
        contato = Contato.query.filter_by(
            nome=informante_nome,
            municipio=municipio
        ).first()
        
        if contato:
            if not contato.historico_comunicacao:
                contato.historico_comunicacao = '[]'
            
            historico = json.loads(contato.historico_comunicacao)
            historico.append(registro)
            contato.historico_comunicacao = json.dumps(historico)
            
            # Atualizar prefer√™ncias baseado no sucesso
            self._atualizar_preferencias_comunicacao(contato, registro)
            
            db.session.commit()
        
        # Gerar recomenda√ß√µes para pr√≥xima comunica√ß√£o
        recomendacoes_proxima = self._gerar_recomendacoes_proxima_comunicacao(
            informante_nome, municipio, registro
        )
        
        return {
            'registro_salvo': registro,
            'historico_atualizado': True,
            'recomendacoes_proxima_comunicacao': recomendacoes_proxima,
            'canal_preferido_atualizado': self._calcular_canal_preferido_atualizado(
                informante_nome, municipio
            )
        }
    
    def gerar_relatorio_comunicacao(self, periodo_dias: int = 30) -> Dict:
        """Gera relat√≥rio de efici√™ncia da comunica√ß√£o"""
        
        from datetime import date
        data_inicio = date.today() - timedelta(days=periodo_dias)
        
        # Obter comunica√ß√µes do per√≠odo
        comunicacoes = self._obter_comunicacoes_periodo(data_inicio)
        
        # An√°lise por canal
        analise_por_canal = defaultdict(lambda: {
            'tentativas': 0,
            'sucessos': 0,
            'taxa_resposta': 0,
            'tempo_medio_resposta': 0
        })
        
        # An√°lise por tipo de mensagem
        analise_por_tipo = defaultdict(lambda: {
            'enviadas': 0,
            'bem_sucedidas': 0,
            'taxa_sucesso': 0
        })
        
        # An√°lise por informante
        informantes_dificeis = []
        informantes_cooperativos = []
        
        # Processar dados
        for comunicacao in comunicacoes:
            canal = comunicacao.get('canal_utilizado', 'indefinido')
            tipo = comunicacao.get('tipo_mensagem', 'indefinido')
            
            analise_por_canal[canal]['tentativas'] += 1
            analise_por_tipo[tipo]['enviadas'] += 1
            
            if comunicacao.get('sucesso'):
                analise_por_canal[canal]['sucessos'] += 1
                analise_por_tipo[tipo]['bem_sucedidas'] += 1
        
        # Calcular estat√≠sticas
        for canal, dados in analise_por_canal.items():
            if dados['tentativas'] > 0:
                dados['taxa_resposta'] = round((dados['sucessos'] / dados['tentativas']) * 100, 1)
        
        for tipo, dados in analise_por_tipo.items():
            if dados['enviadas'] > 0:
                dados['taxa_sucesso'] = round((dados['bem_sucedidas'] / dados['enviadas']) * 100, 1)
        
        # Identificar padr√µes e recomenda√ß√µes
        recomendacoes_melhoria = self._gerar_recomendacoes_melhoria_comunicacao(
            analise_por_canal, analise_por_tipo
        )
        
        return {
            'periodo_analise': {
                'data_inicio': data_inicio.isoformat(),
                'data_fim': date.today().isoformat(),
                'total_comunicacoes': len(comunicacoes)
            },
            'analise_por_canal': dict(analise_por_canal),
            'analise_por_tipo_mensagem': dict(analise_por_tipo),
            'canal_mais_eficaz': max(analise_por_canal.items(), key=lambda x: x[1]['taxa_resposta'])[0] if analise_por_canal else None,
            'tipo_mensagem_mais_eficaz': max(analise_por_tipo.items(), key=lambda x: x[1]['taxa_sucesso'])[0] if analise_por_tipo else None,
            'recomendacoes_melhoria': recomendacoes_melhoria,
            'estatisticas_gerais': {
                'taxa_sucesso_geral': round(sum(c.get('sucesso', 0) for c in comunicacoes) / len(comunicacoes) * 100, 1) if comunicacoes else 0,
                'canais_utilizados': len(analise_por_canal),
                'tipos_mensagem_utilizados': len(analise_por_tipo)
            }
        }
    
    def configurar_escalacao_inteligente(self, criterios_escalacao: Dict) -> Dict:
        """Configura crit√©rios para escala√ß√£o autom√°tica ao supervisor"""
        
        criterios_padrao = {
            'tentativas_sem_sucesso': 3,
            'dias_sem_resposta': 7,
            'tipos_dificuldade_critica': ['recusa_formal', 'impossivel_contato', 'conflito'],
            'municipios_prioritarios': [],
            'prazo_limite_dias': 30
        }
        
        # Mesclar crit√©rios fornecidos com padr√µes
        criterios_finais = {**criterios_padrao, **criterios_escalacao}
        
        # Configurar monitoramento autom√°tico
        monitoramento_config = {
            'criterios_escalacao': criterios_finais,
            'verificacao_diaria': True,
            'notificacao_supervisor': True,
            'template_escalacao': 'escalacao_supervisor',
            'ativo': True
        }
        
        # Salvar configura√ß√£o (simplificado)
        self._salvar_configuracao_escalacao(monitoramento_config)
        
        return {
            'configuracao_salva': monitoramento_config,
            'monitoramento_ativo': True,
            'proxima_verificacao': (datetime.now() + timedelta(days=1)).isoformat()
        }
    
    # M√©todos auxiliares
    
    def _definir_regras_canal(self) -> Dict:
        """Define regras para sele√ß√£o autom√°tica de canal"""
        return {
            'whatsapp': {
                'horario_ideal': {'inicio': time(8, 0), 'fim': time(18, 0)},
                'eficacia_geral': 85,
                'rapidez_resposta': 'alta',
                'adequado_para': ['lembrete', 'confirmacao', 'reagendamento']
            },
            'telefone': {
                'horario_ideal': {'inicio': time(9, 0), 'fim': time(17, 0)},
                'eficacia_geral': 75,
                'rapidez_resposta': 'imediata',
                'adequado_para': ['agendamento_inicial', 'emergencia', 'escalacao']
            },
            'email': {
                'horario_ideal': {'inicio': time(7, 0), 'fim': time(19, 0)},
                'eficacia_geral': 60,
                'rapidez_resposta': 'baixa',
                'adequado_para': ['formal', 'documentacao', 'followup']
            }
        }
    
    # Implementa√ß√µes simplificadas dos m√©todos auxiliares
    def _analisar_historico_comunicacao(self, nome, municipio): return {}
    def _identificar_canais_disponiveis(self, contato): return [{'canal': 'whatsapp'}, {'canal': 'telefone'}]
    def _pontuar_canais(self, canais, tipo, historico, contexto): 
        return [{'canal': 'whatsapp', 'score': 85, 'justificativa': 'Melhor taxa de resposta'}]
    def _gerar_recomendacoes_canal(self, canal, tipo, historico, contexto): return {}
    def _sugerir_horario_ideal(self, canal, historico): return "09:00-11:00"
    def _sugerir_followup(self, canal, tipo): return {"tempo": 24, "canal": "telefone"}
    def _personalizar_mensagem_historico(self, template, dados, nome, municipio):
        if 'template' in template:
            return template['template'].format(**dados)
        elif 'script' in template:
            return template['script'].format(**dados)
        return "Mensagem padr√£o"
    def _gerar_instrucoes_envio(self, canal, template, contato): return {}
    def _calcular_timing_envio(self, canal, template): return datetime.now().isoformat()
    def _configurar_lembrete(self, visita, tipo, horario, canal): return {}
    def _registrar_lembrete_sistema(self, lembrete): pass
    def _atualizar_preferencias_comunicacao(self, contato, registro): pass
    def _gerar_recomendacoes_proxima_comunicacao(self, nome, municipio, registro): return []
    def _calcular_canal_preferido_atualizado(self, nome, municipio): return "whatsapp"
    def _obter_comunicacoes_periodo(self, data_inicio): return []
    def _gerar_recomendacoes_melhoria_comunicacao(self, por_canal, por_tipo): return []
    def _salvar_configuracao_escalacao(self, config): pass