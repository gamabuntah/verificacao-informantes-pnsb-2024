"""
API Routes para Material de Apoio PNSB
Gerencia chat especializado, biblioteca digital e recursos
"""

from flask import Blueprint, request, jsonify, send_file
from ..services.api_manager import api_manager
from ..utils.validators import validate_json_input
from ..utils.error_handlers import APIResponse
import os
import logging
from datetime import datetime
import pdfplumber
from pathlib import Path
import time

logger = logging.getLogger(__name__)

# Cache global para conte√∫do dos PDFs
_pdfs_cache = None
_cache_timestamp = 0
_cache_duration = 1800  # 30 minutos (conte√∫do completo √© pesado)

material_apoio_bp = Blueprint('material_apoio', __name__)

@material_apoio_bp.route('/chat/manual', methods=['POST'])
@validate_json_input(required_fields=['message'])
def chat_manual_pnsb():
    """Chat especializado com contexto do manual PNSB"""
    try:
        user_message = request.validated_data['message']
        
        # Construir contexto espec√≠fico do manual PNSB
        context = build_manual_context(user_message)
        
        # Usar o gerenciador de APIs
        result = api_manager.chat_with_ai(user_message, context)
        
        if result['success']:
            return APIResponse.success(data={
                'response': result['response'],
                'source': 'Manual PNSB 2024',
                'type': 'manual_specialized',
                'fallback_used': False
            })
        else:
            # Fallback espec√≠fico para PNSB baseado nos PDFs
            fallback_response = generate_pnsb_manual_fallback(user_message)
            return APIResponse.success(data={
                'response': fallback_response,
                'source': 'PDFs da pasta Contexto_Material_de_Apoio',
                'type': 'fallback',
                'fallback_used': True,
                'message': 'IA temporariamente indispon√≠vel - usando conhecimento limitado aos 3 PDFs dispon√≠veis'
            })
        
    except Exception as e:
        logger.error(f"Erro no chat manual PNSB: {e}")
        return APIResponse.error(f"Erro no processamento da consulta: {str(e)}")

def extract_complete_pdf_content(pdf_path):
    """Extrai TODO o conte√∫do de um PDF - sem limita√ß√µes"""
    try:
        content = ""
        filename = os.path.basename(pdf_path)
        
        with pdfplumber.open(pdf_path) as pdf:
            total_pages = len(pdf.pages)
            logger.info(f"üìñ Extraindo TODO o conte√∫do de {filename} ({total_pages} p√°ginas)")
            
            for i, page in enumerate(pdf.pages):
                page_text = page.extract_text() or ""
                if page_text.strip():  # S√≥ adicionar se a p√°gina tem conte√∫do
                    content += f"\n=== P√ÅGINA {i + 1} ===\n"
                    content += page_text + "\n"
            
            logger.info(f"üìä {filename}: {len(content):,} caracteres extra√≠dos de {total_pages} p√°ginas")
            return content.strip()
            
    except Exception as e:
        logger.error(f"Erro ao extrair PDF completo {pdf_path}: {e}")
        return f"[ERRO ao ler {os.path.basename(pdf_path)}]"

def extract_pdf_content(pdf_path, max_pages=10, max_chars=3000, key_sections=None):
    """Extrai conte√∫do de um PDF com prioriza√ß√£o de se√ß√µes-chave"""
    try:
        content = ""
        with pdfplumber.open(pdf_path) as pdf:
            total_pages = len(pdf.pages)
            
            # Se h√° se√ß√µes-chave definidas, priorizar essas p√°ginas
            if key_sections:
                logger.info(f"üìë Extraindo se√ß√µes-chave {key_sections} de {os.path.basename(pdf_path)}")
                for page_num in key_sections:
                    if page_num <= total_pages:
                        page = pdf.pages[page_num - 1]  # PDFs s√£o 0-indexed
                        page_text = page.extract_text() or ""
                        content += f"\n=== P√ÅGINA {page_num} (SE√á√ÉO-CHAVE) ===\n"
                        content += page_text + "\n\n"
                
                # Depois extrair p√°ginas do in√≠cio
                remaining_chars = max_chars - len(content)
                if remaining_chars > 1000:
                    pages_to_read = min(50, max_pages, total_pages)
                    for i in range(pages_to_read):
                        if (i + 1) not in key_sections:  # Evitar duplicar se√ß√µes-chave
                            page = pdf.pages[i]
                            page_text = page.extract_text() or ""
                            content += page_text + "\n\n"
                            
                            if len(content) > max_chars:
                                content = content[:max_chars] + "...[CONTE√öDO TRUNCADO]\n"
                                break
            else:
                # Extra√ß√£o normal
                pages_to_read = min(len(pdf.pages), max_pages)
                for i in range(pages_to_read):
                    page = pdf.pages[i]
                    page_text = page.extract_text() or ""
                    content += page_text + "\n\n"
                    
                    # Limitar tamanho do conte√∫do
                    if len(content) > max_chars:
                        content = content[:max_chars] + "...[CONTE√öDO TRUNCADO]\n"
                        break
        
        return content.strip()
    except Exception as e:
        logger.error(f"Erro ao extrair PDF {pdf_path}: {e}")
        return f"[ERRO ao ler {os.path.basename(pdf_path)}]"

def load_pdfs_content():
    """Carrega conte√∫do dos PDFs da pasta Contexto_Material_de_Apoio com cache"""
    global _pdfs_cache, _cache_timestamp
    
    # Verificar se o cache √© v√°lido
    current_time = time.time()
    if _pdfs_cache and (current_time - _cache_timestamp) < _cache_duration:
        logger.info("üìö Usando cache dos PDFs")
        return _pdfs_cache
    
    logger.info("üìö Carregando PDFs (cache expirado ou inexistente)")
    base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    context_folder = os.path.join(base_dir, 'Contexto_Material_de_Apoio')
    
    # Processar TODOS os PDFs que existem na pasta, sem limita√ß√µes
    pdfs_info = {
        'Manual_PNSB2024_15052025.pdf': {'desc': 'Manual oficial da pesquisa PNSB 2024', 'priority': 1},
        'MRS 2024 19 04 25.pdf': {'desc': 'Question√°rio de Manejo de Res√≠duos S√≥lidos', 'priority': 2},
        'MAP 2024 24 04 25.pdf': {'desc': 'Question√°rio de Manejo de √Åguas Pluviais', 'priority': 2},
        'GuiaR√°pido_SigcPnsb2024.pdf': {'desc': 'Guia r√°pido do sistema SIGC PNSB', 'priority': 3},
        'Sistema.pdf': {'desc': 'Documenta√ß√£o t√©cnica do sistema', 'priority': 4}
    }
    
    pdfs_content = {}
    
    for filename, info in pdfs_info.items():
        pdf_path = os.path.join(context_folder, filename)
        if os.path.exists(pdf_path):
            # Extrair TODO o conte√∫do do PDF - sem limita√ß√µes
            content = extract_complete_pdf_content(pdf_path)
            pdfs_content[filename] = {
                'content': content,
                'description': info['desc'],
                'priority': info['priority']
            }
        else:
            logger.warning(f"PDF n√£o encontrado: {pdf_path}")
    
    # Atualizar cache
    _pdfs_cache = pdfs_content
    _cache_timestamp = current_time
    logger.info(f"üìö Cache dos PDFs atualizado com {len(pdfs_content)} documentos")
    
    return pdfs_content

def build_manual_context(user_message):
    """Constr√≥i contexto espec√≠fico baseado EXCLUSIVAMENTE no conte√∫do real dos PDFs"""
    
    # Carregar conte√∫do dos PDFs
    pdfs_content = load_pdfs_content()
    
    # Construir contexto com conte√∫do real
    context_parts = []
    context_parts.append("Voc√™ √© um assistente t√©cnico especializado EXCLUSIVAMENTE no conte√∫do dos seguintes documentos oficiais da PNSB 2024:")
    context_parts.append("")
    
    # Adicionar conte√∫do dos PDFs por prioridade
    sorted_pdfs = sorted(pdfs_content.items(), key=lambda x: x[1]['priority'])
    
    # ENVIAR TODO O CONTE√öDO - SEM LIMITA√á√ïES ARTIFICIAIS
    for filename, pdf_info in sorted_pdfs:
        content = pdf_info['content']
        
        context_parts.append(f"üìö **{filename}** ({pdf_info['description']})")
        context_parts.append(f"CONTE√öDO COMPLETO:")
        context_parts.append(content)  # TODO O CONTE√öDO, SEM TRUNCAR
        context_parts.append("=" * 80)
        context_parts.append("")
    
    context_parts.append(f"üéØ **PERGUNTA DO USU√ÅRIO:** {user_message}")
    context_parts.append("")
    context_parts.append("**INSTRU√á√ïES PARA RESPOSTA:**")
    context_parts.append("1. Base sua resposta EXCLUSIVAMENTE no conte√∫do COMPLETO acima dos PDFs fornecidos")
    context_parts.append("2. Cite qual documento espec√≠fico cont√©m a informa√ß√£o, incluindo p√°ginas quando dispon√≠vel")
    context_parts.append("3. Use apenas a terminologia exata que consta nos PDFs")
    context_parts.append("4. Se a informa√ß√£o n√£o estiver no conte√∫do fornecido acima, informe essa limita√ß√£o")
    context_parts.append("5. Seja preciso e pr√°tico para pesquisadores da PNSB")
    context_parts.append("6. IMPORTANTE: Voc√™ tem acesso ao conte√∫do COMPLETO dos documentos listados acima")
    
    return "\n".join(context_parts)

def generate_pnsb_manual_fallback(user_message):
    """Gera resposta de fallback baseada EXCLUSIVAMENTE nos PDFs da pasta Contexto_Material_de_Apoio"""
    message_lower = user_message.lower()
    
    # Res√≠duos S√≥lidos
    if any(word in message_lower for word in ['residuo', 'lixo', 'coleta', 'reciclagem', 'compostagem', 'mrs']):
        return """**QUESTION√ÅRIOS MRS - MANEJO DE RES√çDUOS S√ìLIDOS (PNSB 2024)**

üìã **Fontes Dispon√≠veis:**
‚Ä¢ **PNSB MRS COMPLETO_22_05_2025.pdf** (Vers√£o detalhada e completa)
‚Ä¢ **MRS 2024 19 04 25.pdf** (Vers√£o b√°sica)

‚ö†Ô∏è **Informa√ß√£o baseada exclusivamente nos PDFs dos question√°rios MRS**

**TEMAS PRINCIPAIS DOS QUESTION√ÅRIOS MRS:**
‚Ä¢ Estrutura organizacional do manejo de res√≠duos s√≥lidos
‚Ä¢ Coleta domiciliar regular e seletiva
‚Ä¢ Tratamento, beneficiamento e destina√ß√£o final
‚Ä¢ Plano Municipal de Gest√£o Integrada de Res√≠duos S√≥lidos (PMGIRS)
‚Ä¢ Parcerias com catadores e cooperativas
‚Ä¢ Compostagem e aproveitamento energ√©tico
‚Ä¢ Custos, taxas e sustentabilidade financeira
‚Ä¢ Res√≠duos especiais e espec√≠ficos

‚ö†Ô∏è **PRIORIZA√á√ÉO:** Para informa√ß√µes detalhadas, consulte preferencialmente o documento COMPLETO (22_05_2025). O documento b√°sico (19_04_25) serve como complemento.

üí° **Sugest√£o:** Fa√ßa perguntas espec√≠ficas como "Como preencher a quest√£o X do question√°rio MRS completo?" para obter informa√ß√µes detalhadas baseadas na vers√£o mais completa do documento."""
    
    # √Åguas Pluviais
    elif any(word in message_lower for word in ['agua', 'pluvial', 'drenagem', 'alagamento', 'inundacao', 'map']):
        return """**QUESTION√ÅRIOS MAP - MANEJO DE √ÅGUAS PLUVIAIS (PNSB 2024)**

üìã **Fontes Dispon√≠veis:**
‚Ä¢ **PNSB MAP COMPLETO_25042025.pdf** (Vers√£o detalhada e completa)
‚Ä¢ **MAP 2024 24 04 25.pdf** (Vers√£o b√°sica)

‚ö†Ô∏è **Informa√ß√£o baseada exclusivamente nos PDFs dos question√°rios MAP**

**TEMAS PRINCIPAIS DOS QUESTION√ÅRIOS MAP:**
‚Ä¢ Sistema de drenagem urbana municipal
‚Ä¢ Problemas de alagamentos, inunda√ß√µes e enchentes
‚Ä¢ Obras de macrodrenagem e microdrenagem
‚Ä¢ Manuten√ß√£o preventiva e corretiva da rede
‚Ä¢ Plano Municipal de Drenagem e Manejo de √Åguas Pluviais
‚Ä¢ Medidas estruturais e n√£o estruturais
‚Ä¢ Gest√£o integrada com recursos h√≠dricos
‚Ä¢ Sustentabilidade e solu√ß√µes baseadas na natureza

‚ö†Ô∏è **PRIORIZA√á√ÉO:** Para informa√ß√µes detalhadas, consulte preferencialmente o documento COMPLETO (25042025). O documento b√°sico (24_04_25) serve como complemento.

üí° **Sugest√£o:** Fa√ßa perguntas espec√≠ficas como "Como preencher a quest√£o Y do question√°rio MAP completo?" para obter informa√ß√µes detalhadas baseadas na vers√£o mais completa do documento."""
    
    # Metodologia
    elif any(word in message_lower for word in ['questionario', 'entrevista', 'metodologia', 'pesquisa', 'manual']):
        return """**METODOLOGIA PNSB 2024**

üìö **Fonte:** Manual_PNSB2024_15052025.pdf (Contexto_Material_de_Apoio)

‚ö†Ô∏è **Informa√ß√£o baseada exclusivamente no Manual PNSB 2024 dispon√≠vel**

**INSTRUMENTOS E METODOLOGIA (conforme Manual):**
‚Ä¢ Question√°rio MRS e MAP da PNSB 2024
‚Ä¢ Procedimentos de entrevista
‚Ä¢ Identifica√ß√£o de informantes
‚Ä¢ Coleta de documenta√ß√£o

‚ö†Ô∏è **LIMITA√á√ÉO:** Esta resposta est√° baseada apenas no conte√∫do espec√≠fico do Manual_PNSB2024_15052025.pdf. Para informa√ß√µes detalhadas sobre procedimentos espec√≠ficos, c√≥digos ou orienta√ß√µes t√©cnicas, consulte diretamente o documento PDF ou use uma pergunta mais espec√≠fica.

üí° **Sugest√£o:** Fa√ßa perguntas espec√≠ficas como "Qual o procedimento para identificar informantes segundo o manual?" para obter informa√ß√µes mais detalhadas baseadas no documento."""
    
    # Perguntas sobre conte√∫do n√£o dispon√≠vel
    elif any(word in message_lower for word in ['lei', 'legislacao', 'marco', 'legal', 'norma', 'plano', 'pmgirs', 'pmsb', 'planejamento', 'indicador', 'calculo', 'indice', 'taxa']):
        return """**INFORMA√á√ÉO N√ÉO DISPON√çVEL NOS DOCUMENTOS**

‚ö†Ô∏è **Sua pergunta se refere a conte√∫do que pode n√£o estar detalhado nos 3 PDFs dispon√≠veis:**

üìö **Documentos dispon√≠veis:**
‚Ä¢ Manual_PNSB2024_15052025.pdf
‚Ä¢ MRS 2024 19 04 25.pdf  
‚Ä¢ MAP 2024 24 04 25.pdf

üîç **Para obter essa informa√ß√£o:**
1. Consulte diretamente os PDFs espec√≠ficos
2. Reformule sua pergunta para ser mais espec√≠fica sobre o conte√∫do dos question√°rios
3. Verifique se a informa√ß√£o est√° em se√ß√µes espec√≠ficas dos documentos

üí° **Exemplos de perguntas adequadas:**
‚Ä¢ "Como preencher a quest√£o X do question√°rio MRS?"
‚Ä¢ "Qual informa√ß√£o solicitar sobre drenagem no MAP?"
‚Ä¢ "Quais s√£o os procedimentos de entrevista no manual?"

‚ö†Ô∏è **LIMITA√á√ÉO:** Este assistente responde apenas com base no conte√∫do espec√≠fico dos 3 PDFs da pasta Contexto_Material_de_Apoio."""
    
    # Resposta gen√©rica
    else:
        return """**ASSISTENTE PNSB 2024 - MATERIAL DE APOIO**

üìö **DOCUMENTOS DISPON√çVEIS (pasta Contexto_Material_de_Apoio):**
‚Ä¢ Manual_PNSB2024_15052025.pdf
‚Ä¢ MRS 2024 19 04 25.pdf (Question√°rio Manejo de Res√≠duos S√≥lidos)
‚Ä¢ MAP 2024 24 04 25.pdf (Question√°rio Manejo de √Åguas Pluviais)

‚ö†Ô∏è **IMPORTANTE - LIMITA√á√ïES:**
‚Ä¢ Respondo APENAS com base no conte√∫do espec√≠fico desses 3 PDFs
‚Ä¢ N√ÉO tenho acesso a conhecimento externo ou outras fontes
‚Ä¢ Se uma informa√ß√£o n√£o estiver nos PDFs, informarei essa limita√ß√£o

üîç **TEMAS DISPON√çVEIS (conforme PDFs):**
‚Ä¢ Estrutura e preenchimento dos question√°rios MRS e MAP
‚Ä¢ Procedimentos metodol√≥gicos do manual
‚Ä¢ Orienta√ß√µes espec√≠ficas dos documentos oficiais

üí° **EXEMPLOS DE PERGUNTAS ADEQUADAS:**
‚Ä¢ "Como preencher a se√ß√£o X do question√°rio MRS?"
‚Ä¢ "Qual o procedimento Y descrito no manual?"
‚Ä¢ "Que informa√ß√µes o question√°rio MAP solicita sobre Z?"
‚Ä¢ "Quais c√≥digos usar para W no MRS?"

‚ö†Ô∏è **EXEMPLOS DE PERGUNTAS QUE N√ÉO POSSO RESPONDER:**
‚Ä¢ Informa√ß√µes n√£o contidas nos 3 PDFs espec√≠ficos
‚Ä¢ Conhecimento geral sobre IBGE ou saneamento
‚Ä¢ Legisla√ß√£o n√£o explicitamente citada nos documentos

**Digite sua pergunta espec√≠fica sobre o conte√∫do dos PDFs da PNSB 2024!**"""

@material_apoio_bp.route('/biblioteca/documentos', methods=['GET'])
def listar_documentos():
    """Lista documentos dispon√≠veis na biblioteca digital"""
    try:
        # Estrutura completa da biblioteca
        documentos = {
            'manuais': [
                {
                    'id': 'manual_pnsb_2024',
                    'titulo': 'Manual PNSB 2024 - Completo',
                    'categoria': 'Manual Oficial',
                    'formato': 'PDF',
                    'tamanho': '2.5 MB',
                    'status': 'disponivel',
                    'url': '/api/material-apoio/biblioteca/download/manual_pnsb_2024'
                }
            ],
            'questionarios': [
                {
                    'id': 'questionario_residuos',
                    'titulo': 'Question√°rio MRS - Res√≠duos S√≥lidos',
                    'categoria': 'Question√°rio',
                    'formato': 'PDF',
                    'tamanho': '1.2 MB',
                    'status': 'disponivel',
                    'url': '/api/material-apoio/biblioteca/download/questionario_residuos'
                },
                {
                    'id': 'questionario_aguas',
                    'titulo': 'Question√°rio MAP - √Åguas Pluviais',
                    'categoria': 'Question√°rio',
                    'formato': 'PDF',
                    'tamanho': '1.1 MB',
                    'status': 'disponivel',
                    'url': '/api/material-apoio/biblioteca/download/questionario_aguas'
                }
            ],
            'legislacao': [
                {
                    'id': 'marco_legal_saneamento',
                    'titulo': 'Marco Legal do Saneamento (Lei 14.026/2020)',
                    'categoria': 'Legisla√ß√£o',
                    'formato': 'PDF',
                    'tamanho': '0.8 MB',
                    'status': 'disponivel',
                    'url': '/api/material-apoio/biblioteca/download/marco_legal_saneamento'
                },
                {
                    'id': 'pnrs_lei',
                    'titulo': 'Pol√≠tica Nacional de Res√≠duos S√≥lidos (Lei 12.305/2010)',
                    'categoria': 'Legisla√ß√£o',
                    'formato': 'PDF',
                    'tamanho': '0.6 MB',
                    'status': 'disponivel',
                    'url': '/api/material-apoio/biblioteca/download/pnrs_lei'
                }
            ]
        }
        
        return APIResponse.success(data=documentos)
        
    except Exception as e:
        logger.error(f"Erro ao listar documentos: {e}")
        return APIResponse.error(f"Erro ao carregar biblioteca: {str(e)}")

@material_apoio_bp.route('/biblioteca/download/<documento_id>', methods=['GET'])
def download_documento(documento_id):
    """Download de documento da biblioteca"""
    try:
        # Diret√≥rio de documentos
        docs_dir = os.path.join(os.path.dirname(__file__), '..', '..', 'documentos_pnsb')
        
        # Mapeamento de documentos dispon√≠veis
        documentos_mapa = {
            'manual_pnsb_2024': {
                'filename': 'Manual_PNSB2024_15052025.pdf',
                'nome_download': 'Manual_PNSB_2024.pdf',
                'content_type': 'application/pdf'
            },
            'questionario_residuos': {
                'filename': 'MRS.pdf', 
                'nome_download': 'Questionario_Residuos_Solidos_PNSB.pdf',
                'content_type': 'application/pdf'
            },
            'questionario_aguas': {
                'filename': 'MAP.pdf',
                'nome_download': 'Questionario_Aguas_Pluviais_PNSB.pdf', 
                'content_type': 'application/pdf'
            },
            'marco_legal_saneamento': {
                'filename': 'Lei_14026_2020_Marco_Legal.pdf',
                'nome_download': 'Marco_Legal_Saneamento_2020.pdf',
                'content_type': 'application/pdf'
            },
            'pnrs_lei': {
                'filename': 'Lei_12305_2010_PNRS.pdf',
                'nome_download': 'Politica_Nacional_Residuos_Solidos.pdf',
                'content_type': 'application/pdf'
            }
        }
        
        if documento_id not in documentos_mapa:
            return APIResponse.error(
                f"Documento '{documento_id}' n√£o encontrado",
                error_type="not_found",
                status_code=404
            )
        
        doc_info = documentos_mapa[documento_id]
        filepath = os.path.join(docs_dir, doc_info['filename'])
        
        # Verificar se arquivo existe, sen√£o criar placeholder
        if not os.path.exists(filepath):
            # Criar diret√≥rio se n√£o existir
            os.makedirs(docs_dir, exist_ok=True)
            
            # Criar arquivo placeholder para demonstra√ß√£o
            placeholder_content = f"""
DOCUMENTO PLACEHOLDER - {doc_info['nome_download']}

Este √© um arquivo de demonstra√ß√£o para o sistema Material de Apoio PNSB.

Para usar com documentos reais:
1. Coloque os arquivos PDF na pasta: gestao_visitas/documentos_pnsb/
2. Use os nomes de arquivo configurados no sistema
3. Os downloads funcionar√£o automaticamente

Documento solicitado: {documento_id}
Arquivo esperado: {doc_info['filename']}
Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}

Sistema Material de Apoio PNSB - Em Desenvolvimento
            """.strip()
            
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(placeholder_content)
        
        # Log da atividade
        logger.info(f"Download solicitado: {documento_id} por IP {request.remote_addr}")
        
        return send_file(
            filepath,
            as_attachment=True,
            download_name=doc_info['nome_download'],
            mimetype=doc_info['content_type']
        )
        
    except Exception as e:
        logger.error(f"Erro no download de {documento_id}: {e}")
        return APIResponse.error(f"Erro no download: {str(e)}")

@material_apoio_bp.route('/busca', methods=['POST'])
@validate_json_input(required_fields=['query'])
def busca_unificada():
    """Busca unificada em todos os materiais"""
    try:
        query = request.validated_data['query']
        search_type = request.validated_data.get('type', 'all')
        filtros = request.validated_data.get('filtros', {})
        
        # Base de conhecimento PNSB para busca
        base_conhecimento = {
            'documentos': [
                {
                    'id': 'manual_pnsb_2024',
                    'titulo': 'Manual PNSB 2024 - Completo',
                    'categoria': 'Manual Oficial',
                    'tipo': 'manual',
                    'descricao': 'Manual completo da Pesquisa Nacional de Saneamento B√°sico 2024',
                    'tags': ['pnsb', 'manual', 'saneamento', 'pesquisa', 'ibge'],
                    'conteudo': 'pesquisa nacional saneamento b√°sico manual metodologia res√≠duos s√≥lidos √°guas pluviais question√°rios'
                },
                {
                    'id': 'questionario_residuos',
                    'titulo': 'Question√°rio MRS - Manejo de Res√≠duos S√≥lidos',
                    'categoria': 'Question√°rio',
                    'tipo': 'questionario',
                    'descricao': 'Question√°rio espec√≠fico para coleta de dados sobre manejo de res√≠duos s√≥lidos urbanos',
                    'tags': ['mrs', 'res√≠duos', 's√≥lidos', 'coleta', 'question√°rio'],
                    'conteudo': 'manejo res√≠duos s√≥lidos coleta domiciliar seletiva tratamento destina√ß√£o pmgirs catadores'
                },
                {
                    'id': 'questionario_aguas',
                    'titulo': 'Question√°rio MAP - Manejo de √Åguas Pluviais',
                    'categoria': 'Question√°rio', 
                    'tipo': 'questionario',
                    'descricao': 'Question√°rio para levantamento de dados sobre drenagem urbana e √°guas pluviais',
                    'tags': ['map', '√°guas', 'pluviais', 'drenagem', 'question√°rio'],
                    'conteudo': 'manejo √°guas pluviais drenagem urbana alagamentos plano municipal microdrenagem macrodrenagem'
                }
            ],
            'procedimentos': [
                {
                    'id': 'entrevista_tecnicas',
                    'titulo': 'T√©cnicas de Entrevista PNSB',
                    'categoria': 'Metodologia',
                    'tipo': 'procedimento',
                    'descricao': 'Orienta√ß√µes para conduzir entrevistas com informantes qualificados',
                    'tags': ['entrevista', 'metodologia', 'informante', 't√©cnicas'],
                    'conteudo': 'entrevista informante qualificado agendamento apresenta√ß√£o documenta√ß√£o observa√ß√µes'
                },
                {
                    'id': 'preenchimento_questionario',
                    'titulo': 'Preenchimento de Question√°rios',
                    'categoria': 'Metodologia',
                    'tipo': 'procedimento', 
                    'descricao': 'Instru√ß√µes para preenchimento correto dos question√°rios PNSB',
                    'tags': ['preenchimento', 'question√°rio', 'c√≥digos', 'consist√™ncia'],
                    'conteudo': 'preenchimento question√°rio c√≥digos padronizados consist√™ncia verifica√ß√£o documenta√ß√£o'
                }
            ],
            'legislacao': [
                {
                    'id': 'marco_legal_2020',
                    'titulo': 'Lei 14.026/2020 - Marco Legal do Saneamento',
                    'categoria': 'Legisla√ß√£o Federal',
                    'tipo': 'lei',
                    'descricao': 'Atualiza o marco legal do saneamento b√°sico no Brasil',
                    'tags': ['marco legal', 'saneamento', 'lei', '2020', 'universaliza√ß√£o'],
                    'conteudo': 'marco legal saneamento universaliza√ß√£o regula√ß√£o metas prazos'
                },
                {
                    'id': 'pnrs_2010',
                    'titulo': 'Lei 12.305/2010 - Pol√≠tica Nacional de Res√≠duos S√≥lidos',
                    'categoria': 'Legisla√ß√£o Federal',
                    'tipo': 'lei',
                    'descricao': 'Institui a Pol√≠tica Nacional de Res√≠duos S√≥lidos',
                    'tags': ['pnrs', 'res√≠duos s√≥lidos', 'lei', '2010', 'pmgirs'],
                    'conteudo': 'pol√≠tica nacional res√≠duos s√≥lidos pmgirs responsabilidade compartilhada log√≠stica reversa'
                }
            ],
            'perguntas_frequentes': [
                {
                    'id': 'faq_coleta_seletiva',
                    'titulo': 'Como investigar coleta seletiva municipal?',
                    'categoria': 'FAQ',
                    'tipo': 'qa',
                    'descricao': 'Perguntas frequentes sobre coleta seletiva no PNSB',
                    'tags': ['coleta seletiva', 'faq', 'municipal'],
                    'conteudo': 'coleta seletiva municipal programa cooperativas materiais recicl√°veis'
                },
                {
                    'id': 'faq_drenagem',
                    'titulo': 'Como avaliar sistema de drenagem urbana?',
                    'categoria': 'FAQ',
                    'tipo': 'qa',
                    'descricao': 'Orienta√ß√µes para avalia√ß√£o de sistemas de drenagem',
                    'tags': ['drenagem', 'urbana', 'faq', 'avalia√ß√£o'],
                    'conteudo': 'drenagem urbana sistema avalia√ß√£o alagamentos obras plano'
                }
            ]
        }
        
        # Realizar busca
        resultados_encontrados = []
        query_lower = query.lower()
        
        # Fun√ß√£o para calcular relev√¢ncia
        def calcular_relevancia(item, query_lower):
            score = 0
            
            # T√≠tulo (peso 3)
            if query_lower in item['titulo'].lower():
                score += 3
                
            # Tags (peso 2)
            for tag in item['tags']:
                if query_lower in tag.lower():
                    score += 2
                    
            # Conte√∫do (peso 1)
            if query_lower in item['conteudo'].lower():
                score += 1
                
            # Categoria (peso 1)
            if query_lower in item['categoria'].lower():
                score += 1
                
            return score
        
        # Buscar em todas as categorias
        categorias_busca = []
        
        if search_type == 'all' or search_type == 'documents':
            categorias_busca.extend(base_conhecimento['documentos'])
        if search_type == 'all' or search_type == 'procedures':
            categorias_busca.extend(base_conhecimento['procedimentos'])
        if search_type == 'all' or search_type == 'legislation':
            categorias_busca.extend(base_conhecimento['legislacao'])
        if search_type == 'all' or search_type == 'qa':
            categorias_busca.extend(base_conhecimento['perguntas_frequentes'])
        
        # Aplicar busca e filtros
        for item in categorias_busca:
            relevancia = calcular_relevancia(item, query_lower)
            
            if relevancia > 0:
                # Aplicar filtros
                if filtros.get('categoria') and filtros['categoria'] not in item['categoria'].lower():
                    continue
                if filtros.get('tipo_documento') and filtros['tipo_documento'] != item['tipo']:
                    continue
                    
                # Determinar √≠cone
                icon_map = {
                    'manual': 'fas fa-file-pdf text-danger',
                    'questionario': 'fas fa-clipboard-list text-primary',
                    'procedimento': 'fas fa-tasks text-success',
                    'lei': 'fas fa-gavel text-warning',
                    'qa': 'fas fa-question-circle text-info'
                }
                
                resultado = {
                    'id': item['id'],
                    'titulo': item['titulo'],
                    'descricao': item['descricao'],
                    'categoria': item['categoria'],
                    'tipo': item['tipo'],
                    'relevancia': relevancia,
                    'icon': icon_map.get(item['tipo'], 'fas fa-file text-secondary'),
                    'tags': item['tags'][:3]  # Primeiras 3 tags
                }
                
                resultados_encontrados.append(resultado)
        
        # Ordenar por relev√¢ncia
        resultados_encontrados.sort(key=lambda x: x['relevancia'], reverse=True)
        
        # Limitar resultados
        if filtros.get('relevancia') == 'high':
            resultados_encontrados = [r for r in resultados_encontrados if r['relevancia'] >= 2]
        
        # Gerar sugest√µes baseadas na query
        sugestoes = gerar_sugestoes_busca(query_lower)
        
        resultados_final = {
            'query': query,
            'total_resultados': len(resultados_encontrados),
            'resultados': resultados_encontrados[:20],  # M√°ximo 20 resultados
            'sugestoes': sugestoes,
            'status': 'ativo',
            'filtros_aplicados': filtros,
            'tipo_busca': search_type
        }
        
        return APIResponse.success(data=resultados_final)
        
    except Exception as e:
        logger.error(f"Erro na busca: {e}")
        return APIResponse.error(f"Erro na busca: {str(e)}")

def gerar_sugestoes_busca(query_lower):
    """Gera sugest√µes de busca baseadas na query"""
    sugestoes_base = {
        'residuo': ['res√≠duos s√≥lidos', 'coleta seletiva', 'PMGIRS', 'destina√ß√£o final'],
        'agua': ['√°guas pluviais', 'drenagem urbana', 'alagamentos', 'macrodrenagem'],
        'coleta': ['coleta domiciliar', 'coleta seletiva', 'frequ√™ncia coleta', 'cobertura'],
        'questionario': ['preenchimento question√°rio', 'c√≥digos PNSB', 'metodologia'],
        'plano': ['PMGIRS', 'plano saneamento', 'plano drenagem', 'planejamento'],
        'lei': ['marco legal', 'PNRS', 'legisla√ß√£o saneamento', 'normas'],
        'municipal': ['prefeitura', 'secretaria', 'gest√£o municipal', 'informante'],
        'tratamento': ['tratamento res√≠duos', 'aterro sanit√°rio', 'compostagem'],
        'drenagem': ['sistema drenagem', 'obras drenagem', 'manuten√ß√£o rede']
    }
    
    sugestoes = []
    for palavra_chave in sugestoes_base:
        if palavra_chave in query_lower:
            sugestoes.extend(sugestoes_base[palavra_chave])
            break
    
    # Sugest√µes padr√£o se nenhuma palavra-chave combinar
    if not sugestoes:
        sugestoes = ['res√≠duos s√≥lidos', '√°guas pluviais', 'question√°rio PNSB', 'legisla√ß√£o saneamento']
    
    return sugestoes[:6]  # M√°ximo 6 sugest√µes

@material_apoio_bp.route('/recursos/calculadora', methods=['POST'])
@validate_json_input(required_fields=['tipo'])
def calculadora_pnsb():
    """Calculadoras espec√≠ficas do PNSB"""
    try:
        tipo = request.validated_data['tipo']
        dados = request.validated_data.get('dados', {})
        
        resultado = {}
        
        if tipo == 'cobertura_coleta':
            # Calculadora de cobertura de coleta
            pop_total = float(dados.get('populacao_total', 0))
            pop_atendida = float(dados.get('populacao_atendida', 0))
            
            if pop_total > 0:
                cobertura = (pop_atendida / pop_total) * 100
                resultado = {
                    'tipo': 'Cobertura de Coleta Domiciliar',
                    'resultado': round(cobertura, 2),
                    'unidade': '%',
                    'formula': '(Popula√ß√£o Atendida / Popula√ß√£o Total) √ó 100',
                    'interpretacao': get_interpretacao_cobertura(cobertura),
                    'dados_entrada': {
                        'populacao_total': pop_total,
                        'populacao_atendida': pop_atendida
                    }
                }
            else:
                return APIResponse.error("Popula√ß√£o total deve ser maior que zero")
                
        elif tipo == 'geracao_per_capita':
            # Calculadora de gera√ß√£o per capita
            total_residuos = float(dados.get('total_residuos_kg_dia', 0))
            populacao = float(dados.get('populacao', 0))
            
            if populacao > 0:
                per_capita = total_residuos / populacao
                resultado = {
                    'tipo': 'Gera√ß√£o Per Capita de Res√≠duos',
                    'resultado': round(per_capita, 3),
                    'unidade': 'kg/hab/dia',
                    'formula': 'Total de Res√≠duos (kg/dia) / Popula√ß√£o',
                    'interpretacao': get_interpretacao_per_capita(per_capita),
                    'dados_entrada': {
                        'total_residuos_kg_dia': total_residuos,
                        'populacao': populacao
                    }
                }
            else:
                return APIResponse.error("Popula√ß√£o deve ser maior que zero")
                
        elif tipo == 'taxa_reciclagem':
            # Calculadora de taxa de reciclagem
            total_coletado = float(dados.get('total_coletado', 0))
            total_reciclado = float(dados.get('total_reciclado', 0))
            
            if total_coletado > 0:
                taxa = (total_reciclado / total_coletado) * 100
                resultado = {
                    'tipo': 'Taxa de Reciclagem',
                    'resultado': round(taxa, 2),
                    'unidade': '%',
                    'formula': '(Total Reciclado / Total Coletado) √ó 100',
                    'interpretacao': get_interpretacao_reciclagem(taxa),
                    'dados_entrada': {
                        'total_coletado': total_coletado,
                        'total_reciclado': total_reciclado
                    }
                }
            else:
                return APIResponse.error("Total coletado deve ser maior que zero")
                
        elif tipo == 'densidade_drenagem':
            # Calculadora de densidade da rede de drenagem
            extensao_rede = float(dados.get('extensao_rede_km', 0))
            area_urbana = float(dados.get('area_urbana_km2', 0))
            
            if area_urbana > 0:
                densidade = extensao_rede / area_urbana
                resultado = {
                    'tipo': 'Densidade da Rede de Drenagem',
                    'resultado': round(densidade, 2),
                    'unidade': 'km/km¬≤',
                    'formula': 'Extens√£o da Rede (km) / √Årea Urbana (km¬≤)',
                    'interpretacao': get_interpretacao_densidade(densidade),
                    'dados_entrada': {
                        'extensao_rede_km': extensao_rede,
                        'area_urbana_km2': area_urbana
                    }
                }
            else:
                return APIResponse.error("√Årea urbana deve ser maior que zero")
                
        elif tipo == 'custo_per_capita':
            # Calculadora de custo per capita
            custo_total_anual = float(dados.get('custo_total_anual', 0))
            populacao = float(dados.get('populacao', 0))
            
            if populacao > 0:
                custo_per_capita = custo_total_anual / populacao
                resultado = {
                    'tipo': 'Custo Per Capita do Servi√ßo',
                    'resultado': round(custo_per_capita, 2),
                    'unidade': 'R$/hab/ano',
                    'formula': 'Custo Total Anual / Popula√ß√£o',
                    'interpretacao': get_interpretacao_custo(custo_per_capita),
                    'dados_entrada': {
                        'custo_total_anual': custo_total_anual,
                        'populacao': populacao
                    }
                }
            else:
                return APIResponse.error("Popula√ß√£o deve ser maior que zero")
                
        else:
            return APIResponse.error(f"Tipo de calculadora '{tipo}' n√£o reconhecido")
        
        return APIResponse.success(data=resultado)
        
    except ValueError as e:
        return APIResponse.error(f"Erro nos dados de entrada: valores devem ser num√©ricos")
    except Exception as e:
        logger.error(f"Erro na calculadora: {e}")
        return APIResponse.error(f"Erro no c√°lculo: {str(e)}")

def get_interpretacao_cobertura(cobertura):
    """Interpreta√ß√£o para cobertura de coleta"""
    if cobertura >= 95:
        return "Excelente - Cobertura quase universal"
    elif cobertura >= 80:
        return "Boa - Cobertura adequada"
    elif cobertura >= 60:
        return "Regular - Necessita melhorias"
    else:
        return "Inadequada - Requer investimentos urgentes"

def get_interpretacao_per_capita(per_capita):
    """Interpreta√ß√£o para gera√ß√£o per capita"""
    if per_capita > 1.5:
        return "Acima da m√©dia nacional (0.8-1.2 kg/hab/dia)"
    elif per_capita >= 0.8:
        return "Dentro da m√©dia nacional"
    else:
        return "Abaixo da m√©dia nacional"

def get_interpretacao_reciclagem(taxa):
    """Interpreta√ß√£o para taxa de reciclagem"""
    if taxa >= 20:
        return "Excelente performance de reciclagem"
    elif taxa >= 10:
        return "Boa performance de reciclagem"
    elif taxa >= 5:
        return "Performance moderada"
    else:
        return "Performance baixa - requer melhorias"

def get_interpretacao_densidade(densidade):
    """Interpreta√ß√£o para densidade de drenagem"""
    if densidade >= 15:
        return "Rede densa - boa cobertura"
    elif densidade >= 10:
        return "Densidade adequada"
    elif densidade >= 5:
        return "Densidade moderada"
    else:
        return "Densidade baixa - pode necessitar expans√£o"

def get_interpretacao_custo(custo):
    """Interpreta√ß√£o para custo per capita"""
    if custo > 200:
        return "Custo alto - verificar efici√™ncia"
    elif custo >= 100:
        return "Custo m√©dio"
    else:
        return "Custo baixo"

@material_apoio_bp.route('/recursos/glossario', methods=['GET'])
def glossario_pnsb():
    """Gloss√°rio de termos t√©cnicos do PNSB"""
    try:
        termo = request.args.get('termo', '').lower()
        
        glossario = {
            'pmgirs': {
                'termo': 'PMGIRS',
                'definicao': 'Plano Municipal de Gest√£o Integrada de Res√≠duos S√≥lidos',
                'descricao': 'Documento que cont√©m o diagn√≥stico da situa√ß√£o dos res√≠duos s√≥lidos gerados no respectivo territ√≥rio, a proposi√ß√£o de cen√°rios, metas de redu√ß√£o, reutiliza√ß√£o, reciclagem, entre outras.',
                'categoria': 'Planejamento',
                'base_legal': 'Lei 12.305/2010 - Art. 18'
            },
            'coleta_seletiva': {
                'termo': 'Coleta Seletiva',
                'definicao': 'Coleta de res√≠duos s√≥lidos previamente segregados conforme sua constitui√ß√£o ou composi√ß√£o',
                'descricao': 'Sistema de recolhimento diferenciado de materiais recicl√°veis (papel, pl√°stico, vidro, metal) j√° separados na fonte geradora.',
                'categoria': 'Opera√ß√£o',
                'base_legal': 'Lei 12.305/2010 - Art. 3¬∫, V'
            },
            'drenagem_urbana': {
                'termo': 'Drenagem Urbana',
                'definicao': 'Conjunto de atividades, infraestruturas e instala√ß√µes operacionais de drenagem urbana de √°guas pluviais',
                'descricao': 'Sistema que compreende microdrenagem, macrodrenagem e o manejo das √°guas pluviais urbanas.',
                'categoria': 'Infraestrutura',
                'base_legal': 'Lei 11.445/2007'
            },
            'aterro_sanitario': {
                'termo': 'Aterro Sanit√°rio',
                'definicao': 'T√©cnica de disposi√ß√£o de res√≠duos s√≥lidos urbanos no solo',
                'descricao': 'Disposi√ß√£o final ambientalmente adequada, com crit√©rios de engenharia e normas operacionais espec√≠ficas.',
                'categoria': 'Destina√ß√£o Final',
                'base_legal': 'NBR 13896'
            },
            'informante_qualificado': {
                'termo': 'Informante Qualificado',
                'definicao': 'Pessoa com conhecimento t√©cnico sobre os servi√ßos de saneamento do munic√≠pio',
                'descricao': 'Servidor p√∫blico ou respons√°vel t√©cnico com acesso √†s informa√ß√µes e documentos necess√°rios para responder ao question√°rio.',
                'categoria': 'Metodologia',
                'base_legal': 'Manual PNSB 2024'
            }
        }
        
        if termo and termo in glossario:
            return APIResponse.success(data=glossario[termo])
        elif termo:
            # Busca parcial
            resultados = {k: v for k, v in glossario.items() 
                         if termo in k or termo in v['definicao'].lower() or termo in v['descricao'].lower()}
            return APIResponse.success(data={'termo_buscado': termo, 'resultados': resultados})
        else:
            return APIResponse.success(data={'glossario_completo': glossario})
            
    except Exception as e:
        logger.error(f"Erro no gloss√°rio: {e}")
        return APIResponse.error(f"Erro ao acessar gloss√°rio: {str(e)}")

@material_apoio_bp.route('/recursos/tabelas', methods=['GET'])
def tabelas_referencia():
    """Tabelas de refer√™ncia do PNSB"""
    try:
        tipo = request.args.get('tipo', 'municipios')
        
        if tipo == 'municipios':
            # Munic√≠pios de Santa Catarina na pesquisa
            tabela = {
                'titulo': 'Munic√≠pios PNSB 2024 - Santa Catarina',
                'colunas': ['C√≥digo IBGE', 'Munic√≠pio', 'Popula√ß√£o 2022', 'Regi√£o'],
                'dados': [
                    ['4202008', 'Balne√°rio Cambori√∫', '138.732', 'Vale do Itaja√≠'],
                    ['4202057', 'Balne√°rio Pi√ßarras', '20.272', 'Vale do Itaja√≠'],
                    ['4202404', 'Bombinhas', '19.040', 'Vale do Itaja√≠'],
                    ['4204202', 'Cambori√∫', '75.267', 'Vale do Itaja√≠'],
                    ['4209102', 'Itaja√≠', '224.936', 'Vale do Itaja√≠'],
                    ['4209300', 'Itapema', '65.835', 'Vale do Itaja√≠'],
                    ['4210902', 'Luiz Alves', '11.287', 'Vale do Itaja√≠'],
                    ['4212809', 'Navegantes', '74.720', 'Vale do Itaja√≠'],
                    ['4213500', 'Penha', '33.367', 'Vale do Itaja√≠'],
                    ['4214805', 'Porto Belo', '20.704', 'Vale do Itaja√≠'],
                    ['4207809', 'Ilhota', '14.875', 'Vale do Itaja√≠']
                ],
                'fonte': 'IBGE - Estimativas Populacionais 2022'
            }
            
        elif tipo == 'classificacao_residuos':
            tabela = {
                'titulo': 'Classifica√ß√£o de Res√≠duos S√≥lidos',
                'colunas': ['Classe', 'Descri√ß√£o', 'Exemplos'],
                'dados': [
                    ['Domiciliar', 'Gerados em atividades dom√©sticas', 'Restos de alimentos, embalagens'],
                    ['Comercial', 'Gerados em estabelecimentos comerciais', 'Pap√©is, pl√°sticos, org√¢nicos'],
                    ['P√∫blico', 'Gerados em espa√ßos p√∫blicos', 'Varri√ß√£o, podas, capina'],
                    ['Constru√ß√£o Civil', 'Gerados em constru√ß√µes', 'Entulhos, materiais de reforma'],
                    ['Perigosos', 'Com risco √† sa√∫de/ambiente', 'Pilhas, baterias, medicamentos']
                ],
                'fonte': 'Lei 12.305/2010'
            }
            
        elif tipo == 'indicadores':
            tabela = {
                'titulo': 'Principais Indicadores PNSB',
                'colunas': ['Indicador', 'F√≥rmula', 'Unidade'],
                'dados': [
                    ['Cobertura Coleta', '(Pop. Atendida / Pop. Total) √ó 100', '%'],
                    ['Gera√ß√£o Per Capita', 'Total Res√≠duos / Popula√ß√£o', 'kg/hab/dia'],
                    ['Taxa Reciclagem', '(Reciclado / Coletado) √ó 100', '%'],
                    ['Densidade Drenagem', 'Extens√£o Rede / √Årea Urbana', 'km/km¬≤'],
                    ['Custo Per Capita', 'Custo Total / Popula√ß√£o', 'R$/hab/ano']
                ],
                'fonte': 'Manual PNSB 2024'
            }
            
        else:
            return APIResponse.error(f"Tipo de tabela '{tipo}' n√£o encontrado")
            
        return APIResponse.success(data=tabela)
        
    except Exception as e:
        logger.error(f"Erro nas tabelas: {e}")
        return APIResponse.error(f"Erro ao acessar tabelas: {str(e)}")

@material_apoio_bp.route('/status', methods=['GET'])
def status_material_apoio():
    """Status geral do sistema de Material de Apoio"""
    try:
        status = {
            'chat_ia': {
                'disponivel': api_manager.is_google_gemini_available(),
                'endpoint': '/api/material-apoio/chat/manual',
                'contexto': 'EXCLUSIVAMENTE baseado nos 3 PDFs da pasta Contexto_Material_de_Apoio',
                'documentos_referencia': [
                    'Manual_PNSB2024_15052025.pdf',
                    'MRS 2024 19 04 25.pdf',
                    'MAP 2024 24 04 25.pdf'
                ],
                'fallback_local': True
            },
            'biblioteca_digital': {
                'disponivel': True,
                'documentos_disponiveis': 5,
                'total_documentos_planejados': 15,
                'download_funcional': True,
                'endpoint': '/api/material-apoio/biblioteca/documentos'
            },
            'busca_inteligente': {
                'disponivel': True,
                'status': 'ativo',
                'base_conhecimento': True,
                'filtros_avancados': True,
                'endpoint': '/api/material-apoio/busca'
            },
            'recursos_praticos': {
                'disponivel': True,
                'status': 'ativo',
                'calculadoras_disponiveis': 5,
                'glossario': True,
                'tabelas_referencia': True,
                'endpoints': {
                    'calculadora': '/api/material-apoio/recursos/calculadora',
                    'glossario': '/api/material-apoio/recursos/glossario',
                    'tabelas': '/api/material-apoio/recursos/tabelas'
                }
            },
            'centro_treinamento': {
                'disponivel': False,
                'status': 'planejado',
                'previsao': 'Pr√≥xima vers√£o'
            },
            'comunidade_pratica': {
                'disponivel': False,
                'status': 'planejado',
                'previsao': 'Vers√£o futura'
            },
            'calculadoras_disponiveis': [
                'cobertura_coleta',
                'geracao_per_capita', 
                'taxa_reciclagem',
                'densidade_drenagem',
                'custo_per_capita'
            ],
            'funcionalidades_implementadas': [
                'Chat IA com Manual PNSB',
                'Biblioteca Digital com downloads',
                'Busca Inteligente unificada',
                'Calculadoras PNSB especializadas',
                'Gloss√°rio t√©cnico',
                'Tabelas de refer√™ncia'
            ],
            'ultima_atualizacao': datetime.now().strftime('%Y-%m-%d'),
            'versao': '2.0'
        }
        
        return APIResponse.success(data=status)
        
    except Exception as e:
        logger.error(f"Erro no status: {e}")
        return APIResponse.error(f"Erro ao verificar status: {str(e)}")