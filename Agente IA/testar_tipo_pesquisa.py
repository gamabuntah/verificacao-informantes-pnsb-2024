#!/usr/bin/env python3
"""
TESTE DO DROPDOWN TIPO DE PESQUISA
=================================

Verifica se a corre√ß√£o do dropdown foi aplicada corretamente.
"""

import re
from pathlib import Path

def verificar_correcao_dropdown():
    """Verifica se as corre√ß√µes foram aplicadas no dropdown."""
    print("üîç VERIFICANDO CORRE√á√ÉO DO DROPDOWN TIPO DE PESQUISA...")
    print("=" * 50)
    
    arquivo_visitas = Path('gestao_visitas/templates/visitas.html')
    
    if not arquivo_visitas.exists():
        print("‚ùå Arquivo visitas.html n√£o encontrado")
        return False
    
    with open(arquivo_visitas, 'r', encoding='utf-8') as f:
        content = f.read()
    
    resultados = []
    
    # 1. Verificar se h√° apenas uma op√ß√£o "ambos" no HTML
    opcoes_html = re.findall(r'<option[^>]*value="[^"]*"[^>]*>.*?</option>', content, re.IGNORECASE)
    opcoes_ambos = [op for op in opcoes_html if 'ambos' in op.lower()]
    
    print("üìã OP√á√ïES DO DROPDOWN ENCONTRADAS:")
    for i, opcao in enumerate(opcoes_html, 1):
        if 'MRS' in opcao or 'MAP' in opcao or 'ambos' in opcao.lower():
            print(f"   {i}. {opcao}")
    
    print(f"\nüìä AN√ÅLISE:")
    print(f"   Total de op√ß√µes com 'ambos': {len(opcoes_ambos)}")
    
    if len(opcoes_ambos) == 1:
        opcao_correta = 'MRS + MAP' in opcoes_ambos[0]
        print(f"   ‚úÖ Apenas uma op√ß√£o 'ambos' encontrada")
        print(f"   {'‚úÖ' if opcao_correta else '‚ùå'} Cont√©m 'MRS + MAP': {opcao_correta}")
        resultados.append(opcao_correta)
    else:
        print(f"   ‚ùå M√∫ltiplas op√ß√µes 'ambos' encontradas (deveria ser apenas 1)")
        resultados.append(False)
    
    # 2. Verificar se o JavaScript n√£o adiciona op√ß√£o duplicada
    js_adiciona_ambos = 'optAmbos.value = \'AMBOS\'' in content
    print(f"   {'‚ùå' if js_adiciona_ambos else '‚úÖ'} JavaScript adiciona 'AMBOS' duplicado: {js_adiciona_ambos}")
    resultados.append(not js_adiciona_ambos)
    
    # 3. Verificar consist√™ncia nas valida√ß√µes
    validacoes_ambos = re.findall(r'[\'"]AMBOS[\'"]', content)
    print(f"   Refer√™ncias a 'AMBOS' (mai√∫sculo): {len(validacoes_ambos)}")
    
    validacoes_ambos_minus = re.findall(r'[\'"]ambos[\'"]', content)
    print(f"   Refer√™ncias a 'ambos' (min√∫sculo): {len(validacoes_ambos_minus)}")
    
    # Deve usar apenas min√∫sculo
    consistencia_ok = len(validacoes_ambos) == 0
    print(f"   {'‚úÖ' if consistencia_ok else '‚ùå'} Consist√™ncia de nomenclatura: {consistencia_ok}")
    resultados.append(consistencia_ok)
    
    return all(resultados)

def verificar_backend():
    """Verifica se o backend aceita 'ambos' corretamente."""
    print("\nüîç VERIFICANDO BACKEND...")
    print("=" * 30)
    
    arquivo_app = Path('app.py')
    
    if not arquivo_app.exists():
        print("‚ùå Arquivo app.py n√£o encontrado")
        return False
    
    with open(arquivo_app, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Verificar valida√ß√£o no backend
    validacao_backend = "['MRS', 'MAP', 'ambos']" in content
    print(f"   {'‚úÖ' if validacao_backend else '‚ùå'} Backend aceita 'ambos': {validacao_backend}")
    
    return validacao_backend

def mostrar_resultado_esperado():
    """Mostra como deve ficar o dropdown."""
    print("\nüéØ RESULTADO ESPERADO NO DROPDOWN:")
    print("=" * 40)
    print("üìã Op√ß√µes que devem aparecer:")
    print("   1. MRS - Manejo de Res√≠duos S√≥lidos")
    print("   2. MAP - Manejo de √Åguas Pluviais")
    print("   3. MRS + MAP")
    print()
    print("‚ùå N√£o deve aparecer:")
    print("   ‚Ä¢ Ambos (sem descri√ß√£o)")
    print("   ‚Ä¢ Op√ß√µes duplicadas")

def main():
    print("=" * 60)
    print("üîß TESTE DO DROPDOWN TIPO DE PESQUISA")
    print("=" * 60)
    
    # Verificar se estamos no diret√≥rio correto
    if not Path("app.py").exists():
        print("‚ùå ERRO: Execute este script no diret√≥rio do projeto")
        print("   cd 'Verifica√ß√£o Informantes PNSB/Agente IA'")
        return
    
    # Verificar corre√ß√µes
    frontend_ok = verificar_correcao_dropdown()
    backend_ok = verificar_backend()
    
    # Mostrar resultado
    mostrar_resultado_esperado()
    
    print("\n" + "=" * 60)
    print("üìä RESULTADO FINAL")
    print("=" * 60)
    
    if frontend_ok and backend_ok:
        print("üéâ CORRE√á√ÉO APLICADA COM SUCESSO!")
        print("   ‚úÖ Frontend corrigido")
        print("   ‚úÖ Backend compat√≠vel")
        print()
        print("üöÄ PR√ìXIMOS PASSOS:")
        print("   1. Reinicie o sistema (Ctrl+C e python app.py)")
        print("   2. Limpe o cache do navegador (Ctrl+F5)")
        print("   3. Acesse: http://localhost:8080/visitas")
        print("   4. Verifique o dropdown 'Tipo de Pesquisa'")
        print()
        print("‚úÖ Agora deve aparecer apenas:")
        print("   ‚Ä¢ MRS - Manejo de Res√≠duos S√≥lidos")
        print("   ‚Ä¢ MAP - Manejo de √Åguas Pluviais")  
        print("   ‚Ä¢ MRS + MAP")
    else:
        print("‚ö†Ô∏è CORRE√á√ÉO INCOMPLETA:")
        if not frontend_ok:
            print("   ‚ùå Frontend ainda tem problemas")
        if not backend_ok:
            print("   ‚ùå Backend n√£o aceita 'ambos'")
    
    print("=" * 60)

if __name__ == "__main__":
    main()